/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jumpingjan_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jumpingjan.js */ \"./src/jumpingjan.js\");\n  //get the canvas that Processing-js will use\n  var canvas = document.getElementById(\"mycanvas\"); \n  //pass the function sketchProc (defined in myCode.js) to Processing's constructor.\n  \n  var processingInstance = new Processing(canvas, _jumpingjan_js__WEBPACK_IMPORTED_MODULE_0__[\"sketchProc\"]); \n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/jumpingjan.js":
/*!***************************!*\
  !*** ./src/jumpingjan.js ***!
  \***************************/
/*! exports provided: sketchProc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sketchProc\", function() { return sketchProc; });\nvar sketchProc=function(PI){\r\nPI.size(400, 600);\r\nPI.frameRate(60);\r\n\r\n/* /* ^^^^^^^^^^^^^^^^^^^^^ BEGIN PROGRAM CODE ^^^^^^^^^^^^^^^^^^^^^ \\*/\r\n\r\nPI.angleMode = 'radians';\r\nvar KEYS = [];\r\nvar GRAVITY = new PI.PVector(0,0.6); // TODO remove\r\nPI.textAlign(PI.CENTER, PI.CENTER);\r\n\r\n/* --------------------- Button Object --------------------- \\*/\r\n\r\nvar Button = function(x, y, txt) {\r\n    this.position = new PI.PVector(x, y); // Center of the button\r\n    this.text = txt;\r\n    \r\n    this.width = 80;\r\n    this.height = 30;\r\n};\r\n\r\nButton.prototype.mouseIsOnMe = function() {\r\n\treturn (PI.mouseX > this.getCornerPositionX('upper_left') &&\r\n          PI.mouseX < this.getCornerPositionX('upper_right')) &&\r\n      (PI.mouseY > this.getCornerPositionY('upper_left') &&\r\n       PI.mouseY < this.getCornerPositionY('lower_right'));\r\n};\r\n\r\n/* Expects a string parameter of either 'upper_left', 'upper_right', 'lower_left', 'lower_right' */\r\nButton.prototype.getCornerPositionX = function(corner) {\r\n    switch(corner) \r\n    {\r\n        case \"upper_left\":\r\n            return this.position.x - this.width/2;\r\n        case \"upper_right\":\r\n            return this.position.x + this.width/2;\r\n        case \"lower_left\":\r\n            return this.position.x - this.width/2;\r\n        case \"lower_right\":\r\n            return this.position.x + this.width/2;\r\n        default:\r\n            return 0; // Error Case\r\n    }\r\n};\r\n\r\n/* Expects a string parameter of either 'upper_left', 'upper_right', 'lower_left', 'lower_right' */\r\nButton.prototype.getCornerPositionY = function(corner) {\r\n    switch(corner) \r\n    {\r\n        case \"upper_left\":\r\n            return this.position.y - this.height/2;\r\n        case \"upper_right\":\r\n            return this.position.y - this.height/2;\r\n        case \"lower_left\":\r\n            return this.position.y + this.height/2;\r\n        case \"lower_right\":\r\n            return this.position.y + this.height/2;\r\n        default:\r\n            return 0; // Error Case\r\n    }\r\n};\r\n\r\nButton.prototype.getVertices = function() {\r\n    return [{x:this.getCornerPositionX(\"upper_left\") , y:this.getCornerPositionY(\"upper_left\") },\r\n{x:this.getCornerPositionX(\"upper_right\"), y:this.getCornerPositionY(\"upper_right\")},\r\n{x:this.getCornerPositionX(\"lower_right\"), y:this.getCornerPositionY(\"lower_right\")},\r\n{x:this.getCornerPositionX(\"lower_left\") , y:this.getCornerPositionY(\"lower_left\") }];\r\n};\r\n\r\nButton.prototype.draw = function() {\r\n    if (this.mouseIsOnMe()) {\r\n        PI.fill(200, 200, 200);\r\n        PI.cursor(HAND);\r\n    }\r\n    else {\r\n        PI.noFill();\r\n    }\r\n\r\n    var vertices = this.getVertices();\r\n    PI.beginShape();\r\n        for (var i = 0; i < vertices.length;i++) {\r\n            PI.vertex(vertices[i].x, vertices[i].y);\r\n        }\r\n    PI.endShape(CLOSE);\r\n    \r\n    PI.fill(0);\r\n    PI.textSize(16);\r\n    PI.text(this.text, this.position.x, this.position.y);\r\n};\r\n\r\n/* --------------------- END Button Object --------------------- \\*/\r\n\r\nvar ArrowButton = function(x, y, txt, dir) {\r\n    Button.apply(this, arguments);\r\n    \r\n    this.width = 50;\r\n    this.height = 25;\r\n    \r\n    this.direction = ((dir || 1) > 0) ? 1 : -1;\r\n};\r\n\r\nArrowButton.prototype = Object.create(Button.prototype);\r\nArrowButton.prototype.constructor = ArrowButton;\r\n\r\nArrowButton.prototype.getVertices = function() {\r\n    var stemSize_h = 0.6;\r\n    var stemSize_w = 0.6;\r\n    \r\n    var x1 = -(this.width/2);\r\n    var x2 = (stemSize_w * this.width) - (this.width/2);\r\n    var x3 = (this.width/2);\r\n    \r\n    var y1 = -1*((stemSize_h * this.height)/2);\r\n    var y2 = -1*(this.height/2);\r\n    var y3 = 0;\r\n    \r\n        return [{x:this.position.x+(this.direction*x1), y:this.position.y-y1},\r\n                {x:this.position.x+(this.direction*x2), y:this.position.y-y1},\r\n                {x:this.position.x+(this.direction*x2), y:this.position.y-y2},\r\n                {x:this.position.x+(this.direction*x3), y:this.position.y-y3}, // ArrowHead\r\n                {x:this.position.x+(this.direction*x2), y:this.position.y+y2},\r\n                {x:this.position.x+(this.direction*x2), y:this.position.y+y1},\r\n                {x:this.position.x+(this.direction*x1), y:this.position.y+y1}];\r\n\r\n};\r\n\r\n/* --------------------- Color Selector Object --------------------- \\*/\r\n\r\nvar ColorSelectorBox = function(x, y, col) {\r\n    this.position = new PI.PVector(x, y);\r\n    this.size = 10;\r\n    \r\n    this.selected = false;\r\n    \r\n    this.color = (col === 'r') ? PI.color(185, 0, 0) :\r\n                    (col === 'b') ? PI.color(80, 0, 255) :\r\n                    (col === 'g') ? PI.color(150, 200, 20) :\r\n                    (col === 'y') ? PI.color(236, 166, 35) :\r\n                    PI.color(185, 0, 0);\r\n};\r\n\r\nColorSelectorBox.prototype.setSelected = function(newValue) {\r\n    this.selected = newValue;\r\n};\r\n\r\nColorSelectorBox.prototype.mouseIsOnMe = function() {\r\n    return (PI.mouseX > this.position.x-this.size/2 && PI.mouseX < this.position.x+this.size/2 && (PI.mouseY > this.position.y-this.size/2 && PI.mouseY < this.position.y+this.size/2));\r\n};\r\n\r\nColorSelectorBox.prototype.draw = function() {\r\n    PI.strokeWeight( (this.selected) ? 3 : 1 );\r\n    PI.stroke(0);\r\n    \r\n    if (this.mouseIsOnMe()) {\r\n        PI.cursor(HAND);   \r\n    }\r\n    \r\n    PI.fill(this.color);\r\n    PI.rect(this.position.x-this.size/2, this.position.y-this.size/2, this.size, this.size);\r\n    PI.strokeWeight(1);\r\n};\r\n\r\nvar ColorSelector = function(x, y) {\r\n    this.position = new PI.PVector(x, y);\r\n    this.items = [];\r\n    this.selectedIndex = 0;\r\n    \r\n    this.PADDING = 5;\r\n    this.ITEM_SIZE = 10;\r\n};\r\n\r\nColorSelector.prototype.getWidth = function() {\r\n    return this.items.length*(this.PADDING+this.ITEM_SIZE);\r\n};\r\n\r\nColorSelector.prototype.getNextItemPosition = function() {\r\n    return {x:this.position.x+(this.PADDING + this.ITEM_SIZE/2) + this.getWidth(), y:this.position.y};\r\n};\r\n\r\nColorSelector.prototype.add = function(newItem_colorCode) {\r\n    var pos = this.getNextItemPosition();\r\n    this.items.push(new ColorSelectorBox(pos.x, pos.y, newItem_colorCode));\r\n};\r\n\r\nColorSelector.prototype.setSelectedIndex = function(itemNumber) {\r\n    if (itemNumber < this.items.length) {\r\n        this.items[this.selectedIndex].setSelected(false);\r\n        this.selectedIndex = itemNumber;\r\n        this.items[itemNumber].setSelected(true);\r\n    }\r\n};\r\n\r\nColorSelector.prototype.mouseIsOnMe = function() {\r\n    return (PI.mouseX > this.position.x && PI.mouseX < this.position.x+this.getWidth() && (PI.mouseY > this.position.y-20/2 && PI.mouseY < this.position.y+20/2));\r\n};\r\n\r\nColorSelector.prototype.draw = function() {\r\n    for (var i = 0; i < this.items.length; i++) {\r\n        this.items[i].draw();   \r\n    }\r\n};\r\n\r\nvar Sun = function() {this.ang = 0; this.maxRayLength = 20;};\r\n\r\nSun.prototype.drawRay = function(len, ang) {\r\n    PI.pushMatrix();\r\n    PI.rotate(ang);\r\n    var a = len;//random(30);\r\n    PI.stroke(217, 222, 69);\r\n    //point((x < 130) ? x++ : , 0);\r\n    PI.line(100, 0, 100+a, 0);\r\n    PI.popMatrix();\r\n};\r\n\r\nSun.prototype.draw = function() {\r\n    PI.strokeWeight(2);\r\n    PI.fill(217, 222, 69);\r\n    PI.pushMatrix(); \r\n    PI.translate(400, 0);\r\n    PI.rotate(this.ang+=0.01);\r\n    var cnt = 5;\r\n    var curL = 0;\r\n    for (var i = 0; i < TWO_PI; i += PI/128) {\r\n        if (curL > cnt) {\r\n            curL = -cnt;\r\n        }\r\n        else if (curL === 0) {\r\n            //curL++;\r\n        }\r\n        \r\n        var len = (++curL < 0) ? -curL : curL;\r\n        this.drawRay(this.maxRayLength/len, i);\r\n    }\r\n    \r\n    PI.ellipse(0, 0, 200, 200);\r\n    PI.popMatrix();\r\n};\r\n\r\n/* --------------------- GAME Variables --------------------- \\*/\r\nvar TILE_SIZE = 40;\r\nvar NUM_TILES = 400/TILE_SIZE;\r\nvar SETTINGS_PLAYER_COLOR = 0;\r\n\r\n/* --------------------- GAME CLASSES --------------------- \\*/\r\nvar Coord = function(x, y){\r\n    this.x = x;\r\n    this.y = y;\r\n};\r\nCoord.prototype.compare = function(other) {\r\n    if (this.x === other.x && this.y === other.y) {\r\n        return 0;   \r\n    }\r\n    else if (this.x > other.x && this.y < other.y) {\r\n        return 1;\r\n    }\r\n    else if (this.x < other.x && this.y > other.y) {\r\n        return -1;   \r\n    }\r\n    else {\r\n        return -100;   \r\n    }\r\n};\r\n\r\nvar splitPoints = function(pts) {\r\n    var p2 = [];\r\n    for (var i = 0; i < pts.length - 1; i++) {\r\n        p2.push(new PI.PVector(pts[i].x, pts[i].y));\r\n        p2.push(new PI.PVector((pts[i].x + pts[i+1].x)/2, (pts[i].y +\r\npts[i+1].y)/2));\r\n    }  \r\n    p2.push(new PI.PVector(pts[i].x, pts[i].y));\r\n    p2.push(new PI.PVector((pts[0].x + pts[i].x)/2, (pts[0].y +\r\npts[i].y)/2));\r\n\r\n\treturn p2;\r\n};  \r\n\r\nvar average = function(p2, pts) {\r\n    for (var i = 0; i < p2.length - 1; i++) {\r\n        var x = (p2[i].x + p2[i+1].x)/2;\r\n        var y = (p2[i].y + p2[i+1].y)/2;\r\n        p2[i].set(x, y);\r\n    } \r\n    var x = (p2[i].x + pts[0].x)/2;\r\n    var y = (p2[i].y + pts[0].y)/2;\r\n    pts.splice(0, pts.length);\r\n    for (i = 0; i < p2.length; i++) {\r\n        pts.push(new PI.PVector(p2[i].x, p2[i].y));   \r\n    }    \r\n};    \r\n\r\nvar subdivide = function(pts) {\r\n\tvar intermed = splitPoints(pts);\r\n\taverage(intermed, pts);\r\n}; \r\n\r\nvar drawShapeFromVertices = function(vertices, notClosed) {\r\n    notClosed |= false;\r\n    \r\n    PI.beginShape();\r\n    for (var i = 0; i < vertices.length; i++) {\r\n        PI.vertex(vertices[i].x, vertices[i].y);   \r\n    }\r\n    if (!notClosed) {\r\n        PI.vertex(vertices[0].x, vertices[0].y);\r\n    }\r\n    PI.endShape();\r\n};\r\n\r\n// Rotates an (x, y) p1 around an (x, y) p2 by n radians\r\nvar rotateAroundPoint = function(p1, p2, n) {\r\n    var translatedVertex = new PI.PVector(p1.x-p2.x, p1.y-p2.y);\r\n        \r\n    var cosn = cos(n);\r\n    var sinn = sin(n);\r\n    var rotatedVertex = new PI.PVector(translatedVertex.x*cosn - translatedVertex.y*sinn, translatedVertex.y*cosn + translatedVertex.x*sinn);\r\n        \r\n    p1.x = rotatedVertex.x+p2.x;            \r\n    p1.y = rotatedVertex.y+p2.y;\r\n};\r\n\r\n/***************************************************************************\r\n\t\t\t\t\tMOVER BASE CLASS\r\n***************************************************************************/\r\nvar Mover = function(x, y, tm) {\r\n\tthis.position = new PI.PVector(x, y);\r\n\tthis.nextPosition = new PI.PVector(0, 0);\r\n\tthis.velocity = new PI.PVector(0, 0);\r\n\tthis.nextVelocity = new PI.PVector(0, 0);\r\n\tthis.acceleration = new PI.PVector(0, 0);\r\n\t\r\n\tthis.tm = tm;\r\n\t\r\n\tthis.mass = 1;\r\n\tthis.height = 0;\r\n\tthis.width = 0;\r\n\tthis.size = TILE_SIZE;\r\n\t\r\n\tthis.movementSpeed = 0;\r\n\tthis.maxSpeed = 0;\r\n\r\n\t\r\n\tthis.restitution = 0;\r\n\t\r\n\tthis.isAffectedByGravity = false;\r\n\tthis.isAffectedByCollisions = false;\r\n\tthis.onGround = false;\r\n\tthis.wasOnGround = false;\r\n};\r\n\r\nMover.prototype.applyForce = function(force) {\r\n\tthis.acceleration.add(PI.PVector.div(force, this.mass));\r\n};\r\n\r\nMover.prototype.getWidth = function() {return this.width*(this.size/400);};\r\nMover.prototype.getHeight = function() {return this.height*(this.size/400);};\r\nMover.prototype.getScaleFactor = function() {return this.size/400;};\r\n\r\nMover.prototype.getBoundingBoxEdges = function() {\r\n    return {top:this.position.y-this.getHeight()/2, bottom:this.position.y+this.getHeight()/2, left: this.position.x-this.getWidth()/2, right:this.position.x+this.getWidth()/2};  \r\n};\r\n\r\nMover.prototype.checkCollision = function(mover) {\r\n    var myEdges = this.getBoundingBoxEdges();\r\n\r\n    var otherEdges = mover.getBoundingBoxEdges();\r\n    var scaleFactor = this.getScaleFactor();\r\n\t\r\n\tvar l1 = new Coord(myEdges.left*scaleFactor, myEdges.top*scaleFactor);\r\n    var r1 = new Coord(myEdges.right*scaleFactor, myEdges.bottom*scaleFactor);\r\n\t//l1.x += this.nextPosition.x-this.position.x;\r\n\t//r1.x += this.nextPosition.x-this.position.x;\r\n\t//l1.y += this.nextPosition.y-this.position.y;\r\n\t//r1.y += this.nextPosition.y-this.position.y;\r\n    var l2 = new Coord(otherEdges.left*scaleFactor, otherEdges.top*scaleFactor);\r\n    var r2 = new Coord(otherEdges.right*scaleFactor, otherEdges.bottom*scaleFactor);\r\n    \r\n    if (l1.compare(r2) === 1 || l2.compare(r1) === 1) {\r\n        return false;   \r\n    }\r\n    \r\n    if (l1.compare(r2) === -1 || l2.compare(r1) === -1) {\r\n        return false;   \r\n    }\r\n    \r\n    if ((r1.x <= l2.x && r1.y <= l2.y) || (l1.x >= r2.x && l1.y >= r2.y)) {\r\n        return false;\r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\n/*Mover.prototype.checkStandingOn = function(mover) {\r\n    var myEdges = this.getBoundingBoxEdges();\r\n\t\r\n    var otherEdges = mover.getBoundingBoxEdges();\r\n    var scaleFactor = this.getScaleFactor();\r\n    \r\n    var l1 = new Coord(myEdges.left*scaleFactor, myEdges.top*scaleFactor);\r\n    var r1 = new Coord(myEdges.right*scaleFactor, myEdges.bottom*scaleFactor);\r\n    var l2 = new Coord(otherEdges.left*scaleFactor, otherEdges.top*scaleFactor);\r\n    var r2 = new Coord(otherEdges.right*scaleFactor, otherEdges.bottom*scaleFactor);\r\n    \r\n\tvar dy = 1;\r\n\t\r\n    if (abs(r1.y - l2.y) > dy) {\r\n\t\treturn false;\r\n\t}\r\n    \r\n    if (l1.compare(r2) === -1 || l2.compare(r1) === -1) {\r\n        return false;   \r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\nMover.prototype.resolveCollision = function(A, B, norm) {\r\n\t// Calculate relative velocity\r\n\tvar rv = PVector.sub(B.velocity, A.velocity);\r\n\r\n\t// Calculate relative velocity in terms of the normal direction\r\n\tvar velAlongNormal = rv.dot(norm);\r\n\r\n\t// Do not resolve if velocities are separating\r\n\tif(velAlongNormal > 0) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Calculate restitution\r\n\tvar e = min( A.restitution, B.restitution);\r\n\r\n\t// Calculate impulse scalar\r\n\tvar j = -(1 + e) * velAlongNormal;\r\n\tj /= 1 / A.mass + 1 / B.mass;\r\n\r\n\t// Apply impulse\r\n\tvar impulse = PVector.mult(normal, j);\r\n\tA.velocity.sub(PVector.div(impulse, A.mass));\r\n\tB.velocity.add(PVector.div(impulse, B.mass));\r\n};\r\n*/\r\nMover.prototype.setPreCollisionVariables = function() {\r\n\tthis.wasOnGround = this.onGround;\r\n\tthis.onGround = false;\r\n};\r\n\r\nMover.prototype.handleCollision = function() {\r\n\t// AABB containing current position and next position\r\n\tvar minPos = new PI.PVector(0, 0);\r\n\tminPos.x = min(this.position.x, this.nextPosition.x);\r\n\tminPos.y = min(this.position.y, this.nextPosition.y);\r\n\tvar maxPos = new PI.PVector(0, 0);\r\n\tmaxPos.x = max(this.position.x, this.nextPosition.x);\r\n\tmaxPos.y = max(this.position.y, this.nextPosition.y);\r\n\t\r\n\t// Extend AABB to bound entire object - position is from the center\r\n\tminPos.sub(new PI.PVector(this.getWidth()/2, this.getHeight()/2));\r\n\tmaxPos.add(new PI.PVector(this.getWidth()/2, this.getHeight()/2));\r\n\t\r\n\t// Debug Collisions\r\n\t/*fill(255, 0, 0);\r\n\tPI.ellipse(minPos.x, minPos.y, 20, 20);\r\n\tfill(0, 0, 255);\r\n\tPI.ellipse(maxPos.x, maxPos.y, 20, 20);*/\r\n\t\r\n\t// Extend AABB a bit more - helps when player is very close to boundary of a cell\r\n\t// Note: not sure if need this or not\r\n\t//minPos.add(5, 5);\r\n\t//maxPos.sub(5, 5);\r\n\t\r\n\tthis.setPreCollisionVariables();\r\n\r\n\tthis.tm.checkForCollisions(minPos, maxPos, this);\r\n};\r\n\r\nMover.prototype.resolveLanding = function() {};\r\n\r\nMover.prototype.CollisionResolution = function(normal, distanceToPlane) {\r\n\tvar separation = max(distanceToPlane, 0);\r\n\tvar penetration = min(distanceToPlane, 0);\r\n\t\r\n\tvar dt = 60; // TODO. maybe this should be something\r\n\tvar normal_velocity = this.nextVelocity.dot(normal) + separation/dt;\t\r\n\t\r\n\tthis.nextPosition.sub(PI.PVector.mult(normal, penetration/dt));\r\n\t\r\n\tif ( normal_velocity < -0.1 ) {\r\n\t\t// remove normal velocity\r\n\t\tvar temp = PI.PVector.mult(normal, normal_velocity);\r\n\t\tthis.nextVelocity.sub(temp);\r\n\t\t\r\n\t\tif (normal.y < 0) {\r\n\t\t\tthis.onGround = true;\r\n\t\t\t\r\n\t\t\tif (!this.wasOnGround) {\r\n\t\t\t\tthis.resolveLanding();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nMover.prototype.update = function() {\r\n\tif (this.isAffectedByGravity) {\r\n\t\tthis.applyForce(GRAVITY);\r\n\t}\r\n\t\r\n\tthis.nextVelocity = PI.PVector.add(this.velocity, this.acceleration); // TODO maybe don't need this\r\n\tvar nextVelocityYDirection = (this.nextVelocity.y > 0) ? 1 : -1;\r\n\t// Clamp max speed\r\n\tthis.nextVelocity.y = nextVelocityYDirection * min(this.maxSpeed, abs(this.nextVelocity.y));\r\n\t//this.nextVelocity.x = nextVelocityYDirection * min(this.maxSpeed, abs(this.nextVelocity.x));\r\n\t\r\n\tthis.nextPosition.add(PI.PVector.add(this.position, this.nextVelocity));\r\n\t\r\n\tif (this.isAffectedByCollisions) {\r\n\t\t// TODO handle collision\r\n\t\t/*if (this.nextPosition.y >= 400-TILE_SIZE-this.getHeight()/2 + 1) { // on Ground\r\n\t\t\tthis.onGround = true;\r\n\t\t\tif (this.nextVelocity.y > 0) { // moving toward ground\r\n\t\t\t\tthis.nextVelocity.set(this.nextVelocity.x, 0);\r\n\t\t\t\tthis.nextPosition.y = this.position.y;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.onGround = false;\r\n\t\t}*/\r\n\t\t\r\n\t\tthis.handleCollision();\r\n\t}\r\n\tthis.position.set(this.nextPosition);\r\n\tthis.velocity.set(this.nextVelocity);\r\n\t\r\n\tthis.acceleration.mult(0);\r\n\tthis.nextPosition.set(0, 0);\r\n\tthis.nextVelocity.y = 0;\r\n\t\r\n};\r\n\r\nvar LeverTile = function(tile) {\r\n\tvar pos = Tilemap.getCoordinateFromTile(tile);\r\n\tMover.apply(this, [pos.x, pos.y]);\r\n\t\t\r\n\tthis.active = false;\r\n\t\r\n\tthis.affectedObjects = [];\r\n};\r\n\r\nLeverTile.prototype = Object.create(Mover.prototype);\r\nLeverTile.prototype.constructor = LeverTile;\r\n\r\nLeverTile.prototype.toggle = function() {\r\n\tthis.active = !this.active;\r\n\t\r\n\tfor (var i = 0; i < this.affectedObjects.length; i++) {\r\n\t\tthis.affectedObjects[i].effectCallback(this.active);\r\n\t}\r\n};\r\n\r\nLeverTile.prototype.addAffectedObject = function(affected) {\r\n\tthis.affectedObjects.push(affected);\r\n};\r\n\r\nLeverTile.prototype.draw = function() { \r\n\tvar leverColor = PI.color(77, 64, 32);\r\n    PI.strokeWeight(8);\r\n\tPI.stroke(leverColor);\r\n\t\r\n\tif (this.active) {\r\n\t\tPI.line(this.position.x, this.position.y+TILE_SIZE*0.4, this.position.x-TILE_SIZE*0.4, this.position.y-TILE_SIZE/4);\r\n\t}\r\n\telse {\r\n\t\tPI.line(this.position.x, this.position.y+TILE_SIZE*0.4, this.position.x+TILE_SIZE*0.4, this.position.y-TILE_SIZE/4);\r\n\t}\r\n    PI.strokeWeight(1);\r\n    \r\n    PI.fill(leverColor);\r\n    PI.arc(this.position.x, this.position.y+TILE_SIZE/2, TILE_SIZE*0.8, TILE_SIZE*0.6, PI, TWO_PI);\r\n};\r\n\r\n/***************************************************************************\r\n\t\t\t\t\tPLATFORM CLASS\r\n***************************************************************************/\r\nvar Platform = function(x, y, width) {\r\n\tMover.apply(this, [x, y, -1]);\r\n\t\r\n\tthis.width = width;\r\n\tthis.height = TILE_SIZE;\r\n\tthis.mass = 1000;\r\n\t\r\n\tthis.size = 400;\r\n\t\r\n\tthis.isAffectedByGravity = false;\r\n\tthis.isAffectedByCollisions = false;\r\n};\r\n\r\nPlatform.prototype = Object.create(Mover.prototype);\r\nPlatform.prototype.constructor = Platform;\r\n\r\nPlatform.prototype.draw = function() {\r\n\tvar left = this.position.x - this.width/2;\r\n\tvar right = this.position.x + this.width/2;\r\n\tvar top = this.position.y - this.height/2;\r\n\tvar bottom = this.position.y + this.height/2;\r\n\t\r\n\t\r\n\tPI.stroke(218, 200, 198);\r\n\tPI.fill(218, 200, 198);\r\n PI.rect(left, top, this.width, this.height);\r\n};\r\n\r\nvar SandBlock = function(x, y, width, grassFlag) {\r\n\tPlatform.apply(this, arguments);\r\n\t\r\n\tthis.hasGrass = grassFlag;\r\n};\r\n\r\nSandBlock.prototype = Object.create(Platform.prototype);\r\nSandBlock.prototype.constructor = SandBlock;\r\n\r\nSandBlock.sandSpots = [];\r\nSandBlock.img = 0;\r\nSandBlock.img_g = 0;\r\n\r\nSandBlock.prototype.draw = function() {\r\n\tif (SandBlock.img !== 0 && SandBlock.img_g !== 0) {\r\n\t\tif (this.hasGrass) {\r\n\t\t\tPI.image(SandBlock.img_g, this.position.x-this.width/2, this.position.y-this.height/2, TILE_SIZE, TILE_SIZE);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tPI.image(SandBlock.img, this.position.x-this.width/2, this.position.y-this.height/2, TILE_SIZE, TILE_SIZE);\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tPI.fill(212, 175, 74);\r\n\t\tPI.strokeWeight(1);\r\n\t\tPI.noStroke();\r\n\t PI.rect(this.position.x-this.width/2, this.position.y-this.height/2, TILE_SIZE, TILE_SIZE);\r\n\t\t\r\n\t\tfor (var i = 0; i < 280; i++) {\r\n\t\t\tPI.stroke(89, 69, 13);\r\n\t\t\tif (SandBlock.sandSpots.length < 280) {\r\n\t\t\t\tSandBlock.sandSpots.push([PI.random(40), PI.random(40)]);\r\n\t\t\t}\r\n\t\t\tPI.point(SandBlock.sandSpots[i][0]+this.position.x-this.width/2, SandBlock.sandSpots[i][1]+this.position.y-this.height/2);\r\n\t\t}\r\n\t\t\r\n\t\tif (this.hasGrass) {\r\n\t\t\tPI.fill(67, 143, 37);\r\n\t\t\tPI.noStroke();\r\n\t\t\tvar x = this.position.x-this.width/2;\r\n\t\t\tvar y = this.position.y-this.height/2;\r\n\t\t\t\r\n\t\t\tPI.ellipse(x+TILE_SIZE*0.23, y+5, TILE_SIZE/2, TILE_SIZE/2);\r\n\t\t\tPI.ellipse(x+TILE_SIZE*0.5, y+5, TILE_SIZE/2, TILE_SIZE/2);\r\n\t\t\tPI.ellipse(x+TILE_SIZE*0.77, y+5, TILE_SIZE/2, TILE_SIZE/2);\r\n\t\t\t\r\n\t\t\tSandBlock.img_g = get(this.position.x-this.width/2, this.position.y-this.height/2, TILE_SIZE, TILE_SIZE);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tSandBlock.img = get(this.position.x-this.width/2, this.position.y-this.height/2, TILE_SIZE, TILE_SIZE);\r\n\r\n\t\t}\r\n\t\t\r\n\t}\r\n};\r\n\r\nvar HalfGroundBlock = function(x, y, width) {Platform.apply(this, arguments);};\r\n\r\nHalfGroundBlock.prototype = Object.create(Platform.prototype);\r\nHalfGroundBlock.prototype.constructor = HalfGroundBlock;\r\n\r\nHalfGroundBlock.prototype.draw = function() {\r\n\tvar corner = new PI.PVector(this.position.x-this.width/2, this.position.y-this.height/2);\r\n    PI.fill(154, 51, 19);\r\n\tPI.noStroke();\r\n    PI.rect(corner.x, corner.y, TILE_SIZE, TILE_SIZE);\r\n    \r\n    PI.fill(67, 143, 37);\r\n    PI.ellipse(corner.x+TILE_SIZE*0.23, corner.y+5, TILE_SIZE/2, TILE_SIZE/2);\r\n    PI.ellipse(corner.x+TILE_SIZE*0.5, corner.y+5, TILE_SIZE/2, TILE_SIZE/2);\r\n    PI.ellipse(corner.x+TILE_SIZE*0.77, corner.y+5, TILE_SIZE/2, TILE_SIZE/2);\r\n};\r\n\r\nvar MidGroundBlock = function(x, y, width, hasGrass) {Platform.apply(this, arguments);this.hasGrass=hasGrass};\r\nMidGroundBlock.prototype = Object.create(Platform.prototype);\r\nMidGroundBlock.prototype.constructor = MidGroundBlock;\r\n\r\nMidGroundBlock.prototype.draw = function() {\r\n\tvar corner = new PI.PVector(this.position.x-this.width/2, this.position.y-this.height/2);\r\n    PI.fill(154, 51, 19);\r\n\tPI.noStroke();\r\n    PI.rect(corner.x, corner.y, TILE_SIZE, TILE_SIZE);\r\n    \r\n    PI.fill(78, 22, 11);\r\n    PI.rect(corner.x, corner.y+TILE_SIZE/2, TILE_SIZE, TILE_SIZE/2);\r\n    PI.ellipse(corner.x+TILE_SIZE*0.2, corner.y+TILE_SIZE*0.6, TILE_SIZE/3, TILE_SIZE/3);\r\n    PI.ellipse(corner.x+TILE_SIZE*0.5, corner.y+TILE_SIZE*0.6, TILE_SIZE/3, TILE_SIZE/3);\r\n    PI.ellipse(corner.x+TILE_SIZE*0.8, corner.y+TILE_SIZE*0.6, TILE_SIZE/3, TILE_SIZE/3);\r\n    \r\n\tif (this.hasGrass) {\r\n\t\tPI.fill(67, 143, 37);\r\n\t\tPI.noStroke();\r\n\t PI.rect(corner.x, corner.y, TILE_SIZE, TILE_SIZE*0.1);\r\n\t}\r\n};\r\n\r\nvar LowerGroundBlock = function(x, y, width) {Platform.apply(this, arguments);};\r\nLowerGroundBlock.prototype = Object.create(Platform.prototype);\r\nLowerGroundBlock.prototype.constructor = LowerGroundBlock;\r\n\r\nLowerGroundBlock.prototype.draw = function() {\r\n\tvar corner = new PI.PVector(this.position.x-this.width/2, this.position.y-this.height/2);\r\n    PI.fill(78, 22, 11);\r\n\tPI.noStroke();\r\n    PI.rect(corner.x, corner.y, TILE_SIZE, TILE_SIZE);\r\n};\r\n\r\n/**************************************************************************/\r\nvar Flatform = function(x, y, orientation) {\r\n\tPlatform.apply(this, [x, y, TILE_SIZE]);\r\n\t\r\n\tthis.width = TILE_SIZE;\r\n\tthis.height = TILE_SIZE/5;\r\n\t\r\n\tthis.orientation = orientation;\r\n\t\r\n\tthis.color = PI.color(80, 140, 200);\r\n};\r\n\r\nFlatform.getPositionFromTile = function(tile, orientation) {\r\n\tvar x = tile.col*TILE_SIZE+ TILE_SIZE/2;\r\n\tif (orientation === 't') {\r\n\t\tvar y = tile.row*TILE_SIZE + TILE_SIZE/5/2;\r\n\t}\r\n\telse if (orientation === 'b') {\r\n\t\tvar y = (tile.row+1)*TILE_SIZE - TILE_SIZE/5/2;\r\n\t}\r\n\t\r\n\tvar temp =  {'x':x, 'y':y};\r\n\treturn temp;\r\n};\r\n\r\nFlatform.prototype = Object.create(Platform.prototype);\r\nFlatform.prototype.constructor = Flatform;\r\n\r\nFlatform.prototype.draw = function() {\r\n\tvar left = this.position.x - this.width/2;\r\n\tvar right = this.position.x + this.width/2;\r\n\tvar top = this.position.y - this.height/2;\r\n\tvar bottom = this.position.y + this.height/2;\r\n\t\r\n\tvar cornerPos = new PI.PVector(left, \r\n\t\t\t(this.orientation === 't') ? top : this.position.y-this.height/2);\r\n\tPI.noStroke();\r\n\tPI.fill(this.color);\r\n PI.rect(cornerPos.x, cornerPos.y, this.width, this.height);\r\n};\r\n\r\n/**************************************************************************/\r\nvar InvisibleFlatform = function(x, y, orientation, defEnabled) {\r\n\tFlatform.apply(this, arguments);\r\n\t\r\n\tthis.enabled = defEnabled;\r\n\tthis.enabled |= false;\r\n};\r\n\r\nInvisibleFlatform.prototype = Object.create(Flatform.prototype);\r\nInvisibleFlatform.prototype.constructor = InvisibleFlatform;\r\n\r\nInvisibleFlatform.prototype.effectCallback = function(status) {\r\n\tthis.enabled = !this.enabled;\r\n};\r\n\r\nInvisibleFlatform.prototype.draw = function() {\r\n\tif (this.enabled) {\r\n\t\tFlatform.prototype.draw.call(this);\r\n\t}\r\n};\r\n\r\n/***************************************************************************\r\n\t\t\t\t\tPLAYER CLASS\r\n***************************************************************************/\r\n\r\nvar Player = function(x, y, tm) {\r\n    Mover.apply(this, arguments);\r\n\tthis.startPosition = new PI.PVector(x, y);\r\n    this.position = new PI.PVector(x, y);\r\n\tthis.mass = 10;\r\n\tthis.height = 390;\r\n\tthis.width = 300;\r\n\tthis.size = TILE_SIZE;\r\n\t\r\n\tthis.isAffectedByGravity = true;\r\n\tthis.isAffectedByCollisions = true;\r\n\tthis.onGround = true;\r\n\t\r\n\tthis.movementSpeed = 3;\r\n\tthis.jumpForce = new PI.PVector(0, -25);\r\n\tthis.jumped = 0;\r\n\t\r\n\tthis.maxSpeed = 20;\r\n\t\r\n\tthis.armAngle = 0;\r\n\t\r\n\tthis.playerColor = PI.color(236, 166, 35);\r\n\t\r\n\tthis.direction = 1;\r\n    \r\n    this.sunglassPoints = [{x:138, y:132}, {x:143, y:121}, {x:157, y:135}, {x:170, y:113}, {x:195, y:113}, {x:197, y:136}, {x:208, y:135}, {x:220, y:114}, {x:238, y:115}, {x:245, y:133}, {x:252, y:120}, {x:258, y:130}, {x:247, y:147}, {x:238, y:167}, {x:212, y:164}, {x:204, y:146}, {x:192, y:147}, {x:185, y:164}, {x:161, y:164}, {x:155, y:146}, ];\r\n    \r\n    this.subdivsLeft = 1;\r\n    \r\n\t//{ Character Vertices\r\n    this.hairVertices = [{x:266, y:94}, {x:235, y:88}, {x:208, y:90}, {x:183, y:108}, {x:176, y:136}, {x:171, y:180}, {x:148, y:195}, {x:134, y:207}, {x:115, y:205}, {x:96, y:167}, {x:94, y:131}, {x:81, y:127}, {x:74, y:144}, {x:75, y:165}, {x:83, y:198}, {x:35, y:208}, {x:46, y:198}, {x:41, y:172}, {x:55, y:136}, {x:60, y:112}, {x:80, y:105}, {x:96, y:118}, {x:106, y:93}, {x:132, y:73}, {x:178, y:53}, {x:233, y:55}, {x:254, y:74}, {x:274, y:84}, {x:264, y:89},];\r\n    this.hairVertices_bw = [{x:134, y:94}, {x:165, y:88}, {x:192, y:90}, {x:217, y:108}, {x:224, y:136}, {x:229, y:180}, {x:252, y:195}, {x:266, y:207}, {x:285, y:205}, {x:304, y:167}, {x:306, y:131}, {x:319, y:127}, {x:326, y:144}, {x:325, y:165}, {x:317, y:198}, {x:365, y:208}, {x:354, y:198}, {x:359, y:172}, {x:345, y:136}, {x:340, y:112}, {x:320, y:105}, {x:304, y:118}, {x:294, y:93}, {x:268, y:73}, {x:222, y:53}, {x:167, y:55}, {x:146, y:74}, {x:126, y:84}, {x:136, y:89}];\r\n    \r\n    this.armLeftVertices = [{x:148, y:241}, {x:151, y:275}, {x:165, y:297}, {x:185, y:302}, {x:189, y:282}, {x:177, y:257}, {x:179, y:244},];\r\n    this.armLeftVertices_bw = [{x:252, y:241}, {x:249, y:275}, {x:235, y:297}, {x:215, y:302}, {x:211, y:282}, {x:223, y:257}, {x:221, y:244}];\r\n    \r\n    this.armRightVertices = [{x:213, y:251}, {x:219, y:285}, {x:235, y:305}, {x:255, y:308}, {x:259, y:287}, {x:244, y:264}, {x:243, y:236},];\r\n    this.armRightVertices_bw = [{x:187, y:251}, {x:181, y:285}, {x:165, y:305}, {x:145, y:308}, {x:141, y:287}, {x:156, y:264}, {x:157, y:236}];\r\n    \r\n    this.legVertices = [{x:150, y:310}, {x:158, y:330}, {x:156, y:361}, {x:215, y:361}, {x:214, y:344}, {x:227, y:338}, {x:215, y:342},/*Short-Leg{x:190, y:363}*/ {x:190, y:363}, {x:250, y:361}, {x:250, y:337}, {x:246, y:322}, {x:250, y:310}, {x:200, y:310}, ];\r\n    this.legVertices_bw = [{x:250, y:310}, {x:242, y:330}, {x:244, y:361}, {x:185, y:361}, {x:186, y:344}, {x:173, y:338}, {x:185, y:342}, {x:210, y:363}, {x:150, y:361}, {x:150, y:337}, {x:154, y:322}, {x:150, y:310}, {x:200, y:310}];\r\n    \r\n    this.legAngleOffset = 20;\r\n    this.legAngleOffsetCounter = this.legAngleOffset/2;\r\n    \r\n    this.bootLeftVertices = this.getBootVertices(185, 377);\r\n    this.bootLeftVertices_bw = this.getBootVertices_bw(185, 377);\r\n    this.bootRightVertices = this.getBootVertices(220, 377);\r\n    this.bootRightVertices_bw = this.getBootVertices_bw(220, 377);\r\n\t//}\r\n};\r\n\r\nPlayer.prototype = Object.create(Mover.prototype);\r\nPlayer.prototype.constructor = Player;\r\n\r\nPlayer.prototype.resetPlayer = function() {\r\n\tthis.position.x = this.startPosition.x;\r\n\tthis.position.y = this.startPosition.y;\r\n\t\r\n};\r\n\r\nPlayer.prototype.changeColor = function(col) {\r\n\tthis.playerColor = (col === 0) ? PI.color(236, 165, 15) :\r\n\t\t\t\t\t\t(col === 1) ? PI.color(185, 0, 0) :\r\n                    (col === 2) ? PI.color(80, 0, 255) :\r\n                    (col === 3) ? PI.color(150, 200, 20) :\r\n                    (col === 4) ? PI.color(228, 232, 16) : \r\n\t\t\t\t\t\t\t\t\tPI.color(236, 165, 15);\r\n};\r\n\r\nPlayer.prototype.getBootVertices = function(center_X, center_Y) {\r\n    return [{x:center_X+60, y:center_Y+13}, {x:center_X+40, y:center_Y+-2}, {x:center_X+30, y:center_Y+-17}, {x:center_X+27, y:center_Y+-17}, {x:center_X+-30, y:center_Y+-17}, {x:center_X+-30, y:center_Y+-17}, {x:center_X+-30, y:center_Y+18}, {x:center_X+-30, y:center_Y+18}, {x:center_X+30, y:center_Y+18}, {x:center_X+40, y:center_Y+18}];\r\n};\r\n\r\nPlayer.prototype.getBootVertices_bw = function(center_X, center_Y) {\r\n    return [{x:center_X-60, y:center_Y+13}, {x:center_X-40, y:center_Y+-2}, {x:center_X-30, y:center_Y+-17}, {x:center_X-27, y:center_Y+-17}, {x:center_X+30, y:center_Y+-17}, {x:center_X+30, y:center_Y+-17}, {x:center_X+30, y:center_Y+18}, {x:center_X+30, y:center_Y+18}, {x:center_X-30, y:center_Y+18}, {x:center_X-40, y:center_Y+18}];\r\n};\r\n\r\nPlayer.prototype.moveArms = function() {\r\n\tvar frontArm = (this.direction === -1) ? this.armRightVertices_bw : this.armLeftVertices;\r\n\tvar backArm = (this.direction === -1) ? this.armLeftVertices_bw : this.armRightVertices;\r\n\t\r\n    var angleIncrement = 0.05*((this.legAngleOffsetCounter<0) ? -1 : 1);\r\n    if (this.legAngleOffsetCounter <= -this.legAngleOffset-1) {\r\n        this.legAngleOffsetCounter = this.legAngleOffset;\r\n    }\r\n    var leftArmPivotPoint = {x:(frontArm[0].x+frontArm[frontArm.length-1].x)/2, y:frontArm[0].y};\r\n    for (var i = 1; i < frontArm.length; i++) {\r\n        rotateAroundPoint(frontArm[i], leftArmPivotPoint, angleIncrement);\r\n    }\r\n    \r\n    var rightArmPivotPoint = {x:(backArm[0].x+backArm[backArm.length-1].x)/2, y:backArm[0].y};\r\n    for (var i = 1; i < backArm.length; i++) {\r\n        rotateAroundPoint(backArm[i], rightArmPivotPoint, -angleIncrement);   \r\n    }\r\n\t\r\n\tthis.armAngle += angleIncrement;\r\n};\r\n\r\nPlayer.prototype.rotateLegsByNumOfIncrement = function(incs) {\r\n\tvar legs = (this.direction === -1) ? this.legVertices_bw : this.legVertices;\r\n    var bootLeft = (this.direction === -1) ? this.bootRightVertices_bw : this.bootLeftVertices;\r\n    var bootRight = (this.direction === -1) ? this.bootLeftVertices_bw : this.bootRightVertices;\r\n    \r\n    var angleIncrement = 0.1*incs;\r\n\r\n    var leftLegPivotPoint = {x:(legs[4].x+legs[1].x)/2, y:legs[1].y};\r\n    \r\n    rotateAroundPoint(legs[2], leftLegPivotPoint, angleIncrement);\r\n    rotateAroundPoint(legs[3], leftLegPivotPoint, angleIncrement);\r\n    for (var i = 0; i < bootLeft.length; i++) {\r\n        rotateAroundPoint(bootLeft[i], leftLegPivotPoint, angleIncrement);   \r\n    }\r\n    \r\n    var rightLegPivotPoint = {x:(legs[8].x+legs[9].x)/2, y:legs[1].y};\r\n    rotateAroundPoint(legs[7], legs[5], -angleIncrement);\r\n    rotateAroundPoint(legs[8], legs[5], -angleIncrement);\r\n    rotateAroundPoint(legs[9], legs[5], -angleIncrement);\r\n    for (var i = 0; i < bootRight.length; i++) {\r\n        rotateAroundPoint(bootRight[i], legs[5], -angleIncrement);   \r\n    }\r\n};\r\n\r\nPlayer.prototype.rotateArmsByAngle = function(theta) {\r\n\tvar armLeft = (this.direction === -1) ? this.armRightVertices_bw : this.armLeftVertices;\r\n\tvar armRight = (this.direction === -1) ? this.armLeftVertices_bw : this.armRightVertices;\r\n\t\r\n\tvar leftArmPivotPoint = {x:(armLeft[0].x+armLeft[armLeft.length-1].x)/2, y:armLeft[0].y};\r\n    for (var i = 1; i < armLeft.length; i++) {\r\n        rotateAroundPoint(armLeft[i], leftArmPivotPoint, theta);\r\n    }\r\n    \r\n    var rightArmPivotPoint = {x:(armRight[0].x+armRight[armRight.length-1].x)/2, y:armRight[0].y};\r\n    for (var i = 1; i < armRight.length; i++) {\r\n        rotateAroundPoint(armRight[i], rightArmPivotPoint, -theta);\r\n    }\r\n};\r\n\r\nPlayer.prototype.moveLegs = function() {    \r\n    var angleIncrement = (this.legAngleOffsetCounter<0) ? -1 : 1;\r\n\t\r\n\tthis.rotateLegsByNumOfIncrement(angleIncrement);\r\n\t\r\n\tthis.legAngleOffsetCounter = (this.legAngleOffsetCounter-1 < -this.legAngleOffset) ? this.legAngleOffset-1 : this.legAngleOffsetCounter-1;\r\n};\r\n\r\nPlayer.prototype.walk = function() {\r\n    this.moveArms();\r\n    this.moveLegs();\r\n};\r\n\r\nPlayer.prototype.jumpReset = function() {\r\n\tvar angleIncrement = 3 * TWO_PI / 4;\r\n\r\n    this.rotateArmsByAngle(angleIncrement);\r\n\t\r\n\tthis.armAngle -= TWO_PI/4;\r\n};\r\n\r\nPlayer.prototype.armAngleReset = function() {\r\n\tvar angleIncrement = -1 * this.armAngle;\r\n\r\n    this.rotateArmsByAngle(angleIncrement);\r\n\t\r\n\tthis.armAngle = 0;\r\n};\r\n\r\nPlayer.prototype.legAngleReset = function() {\t\r\n\tif (this.legAngleOffsetCounter >= 0) {\r\n\t\tvar base = this.legAngleOffset/2;\r\n\t\tvar base_offset = this.legAngleOffsetCounter - base;\r\n\t\t\r\n\t\tthis.rotateLegsByNumOfIncrement(base_offset);\r\n\t\tthis.legAngleOffsetCounter = this.legAngleOffset/2;\r\n\t}\r\n\telse {\r\n\t\tvar base = -this.legAngleOffset/2;\r\n\t\tvar base_offset = base - this.legAngleOffsetCounter-2;\r\n\t\t\r\n\t\tthis.rotateLegsByNumOfIncrement(base_offset);\r\n\t\tthis.legAngleOffsetCounter = this.legAngleOffset/2;\r\n\t}\r\n};\r\n\r\nPlayer.prototype.jump = function() {\r\n\tvar angleIncrement = TWO_PI / 4;\r\n\tthis.armAngleReset();\r\n\tthis.legAngleReset();\r\n\r\n    this.rotateArmsByAngle(angleIncrement);\r\n\t\r\n\tthis.armAngle += angleIncrement;\r\n};\r\n\r\nPlayer.prototype.resolveLanding = function() {\r\n\tif (this.jumped > 0) {\r\n\t\tthis.jumped = 0;\r\n\t\tthis.jumpReset();\r\n\t}\r\n};\r\n\r\nPlayer.prototype.keyboardCallback = function() {\r\n\tif (KEYS[87] === 1) { // w was pressed - Jump\r\n\t\tif (this.jumped < 2) {\r\n\t\t\tthis.applyForce(this.jumpForce);\r\n\t\t\tthis.jump();\r\n\t\t\tthis.jumped++;\r\n\t\t}\r\n\t\t\r\n\t\tKEYS[87] = 0;\r\n\t}\r\n\t\r\n\tif (KEYS[65] === 1) { // a was pressed - Walk Left\r\n\t\tvar inAirTurn = false;\r\n\t\tif (this.direction === 1 && this.onGround) {this.legAngleReset();this.armAngleReset();}\r\n\t\telse if (this.direction === 1) {this.jumpReset(); inAirTurn = true;}\r\n\t\tthis.direction = -1;\r\n\t\tif (inAirTurn) {this.jump();}\r\n\t\tif (this.onGround) {\r\n\t\t\tthis.walk();\r\n\t\t}\r\n\t\tthis.nextPosition.x -= this.movementSpeed;\r\n\t\t\r\n\t\t//KEYS[65] = 0;\r\n\t}\r\n\telse if (KEYS[68] === 1) { // d was pressed - Walk Right\r\n\t\tvar inAirTurn = false;\r\n\t\tif (this.direction === -1 && this.onGround) {this.legAngleReset();this.armAngleReset();}\r\n\t\telse if (this.direction === -1) {this.jumpReset(); inAirTurn = true;}\r\n\t\tthis.direction = 1;\r\n\t\tif (inAirTurn) {this.jump();}\r\n\t\tif (this.onGround) {\r\n\t\t\tthis.walk();\r\n\t\t}\r\n\t\tthis.nextPosition.x += this.movementSpeed;\r\n\t\t\r\n\t\t//KEYS[68] = 0;\r\n\t}\r\n\t\r\n\tif (KEYS[32] === 1) {\r\n\t\tif (this.atActionable) {\r\n\t\t\tthis.atActionable.toggle();\r\n\t\t}\r\n\t\t\r\n\t\tKEYS[32] = 0;\r\n\t}\r\n};\r\n\r\nPlayer.prototype.update = function() {\r\n\tvar isLanding = this.onGround;\r\n\t\r\n\tthis.keyboardCallback();\r\n\t\r\n\tMover.prototype.update.call(this);\r\n\t\r\n\t/*if (!isLanding && this.onGround && (this.jumped > 0)) { // Landed this frame\r\n\t\tthis.jumped = 0;\r\n\t\tthis.jumpReset();\r\n\t}*/\r\n\t\r\n\tif (this.position.x >= 400 + this.getWidth()/2 || this.position.x <= 0 - this.getWidth()/2) {\r\n\t\tthis.resetPlayer();\r\n\t}\r\n};\r\n\r\nPlayer.prototype.draw = function() {\r\n    var backArm = [];\r\n    var backHand = [];\r\n    var frontArm = [];\r\n    var frontHand = [];\r\n    var legs = [];\r\n    var hair = [];\r\n    var backBoot = [];\r\n    var frontBoot = [];\r\n    if (this.direction === 1) {\r\n        backArm = this.armRightVertices;\r\n        backHand = this.armRightVertices[3];\r\n        frontArm = this.armLeftVertices;\r\n        frontHand = this.armLeftVertices[3];\r\n        legs = this.legVertices;\r\n        hair = this.hairVertices;\r\n        frontBoot = this.bootLeftVertices;\r\n        backBoot = this.bootRightVertices;\r\n    }\r\n    else if (this.direction === -1) {\r\n        backArm = this.armRightVertices_bw;\r\n        backHand = this.armRightVertices_bw[3];\r\n        frontArm = this.armLeftVertices_bw;\r\n        frontHand = this.armLeftVertices_bw[3];\r\n        legs = this.legVertices_bw;\r\n        hair = this.hairVertices_bw;\r\n        backBoot = this.bootLeftVertices_bw;\r\n        frontBoot = this.bootRightVertices_bw;\r\n    }\r\n    \r\n    PI.pushMatrix();\r\n    \r\n    PI.translate(this.position.x-this.size/2, this.position.y-this.size/2);\r\n\tscale(this.size/400);\r\n\r\n    PI.noFill();\r\n    \r\n    // Back Arm\r\n    PI.stroke(0);\r\n    PI.fill(this.playerColor);\r\n    drawShapeFromVertices(backArm, true);\r\n    \r\n    // Back Hand\r\n    PI.stroke(0);\r\n    PI.fill(255, 206, 168);\r\n    PI.ellipse(backHand.x, backHand.y, 45 , 45);\r\n    \r\n    // Body\r\n    PI.stroke(0);\r\n    PI.fill(this.playerColor);\r\n    PI.ellipse(200, 275, 115, 150);\r\n    \r\n    // Head\r\n    PI.stroke(0);\r\n    PI.fill(255, 206, 168);\r\n    PI.ellipse(200, 150, 175, 175);\r\n    \r\n    // Eyes\r\n    if (this.direction === 1) {\r\n        PI.stroke(0);\r\n        PI.fill(245, 245, 245);\r\n        PI.ellipse(215, 140, 15, 50);\r\n        PI.ellipse(260, 140, 15, 50);\r\n        PI.fill(0);\r\n        PI.ellipse(218, 140, 9, 35);\r\n        PI.ellipse(262, 140, 9, 35);\r\n    }\r\n    else if (this.direction === -1) {\r\n        PI.stroke(0);\r\n        PI.fill(245, 245, 245);\r\n        PI.ellipse(185, 140, 15, 50);\r\n        PI.ellipse(140, 140, 15, 50);\r\n        PI.fill(0);\r\n        PI.ellipse(182, 140, 9, 35);\r\n        PI.ellipse(138, 140, 9, 35);\r\n    }\r\n    \r\n    // Hair\r\n    PI.stroke(0);\r\n    PI.fill(61, 33, 22);\r\n    drawShapeFromVertices(hair);\r\n    \r\n    // Mouth\r\n    PI.stroke(0);\r\n    strokeWeight(2.5);\r\n    if (this.direction === 1) {\r\n        PI.line(215, 200, 255, 200);\r\n    }\r\n    else if (this.direction === -1) {\r\n        PI.line(185, 200, 145, 200);\r\n    }\r\n    strokeWeight(1);\r\n    \r\n    // Nose\r\n    PI.fill(224, 121, 112);\r\n    if (this.direction === 1) {\r\n        PI.ellipse(245, 165, 45, 35);\r\n    }\r\n    else if (this.direction === -1) {\r\n        PI.ellipse(155, 165, 45, 35);\r\n    }\r\n    \r\n    // Front Arm\r\n    PI.stroke(0);\r\n    PI.fill(this.playerColor);\r\n    drawShapeFromVertices(frontArm, true);\r\n    \r\n    // Back Boots\r\n    PI.fill(101, 89, 89);\r\n    PI.stroke(0);\r\n    drawShapeFromVertices(backBoot);\r\n    \r\n    // Legs\r\n    PI.stroke(0);\r\n    PI.fill(146, 64, 38);\r\n    drawShapeFromVertices(legs);\r\n\r\n    // Front Boot\r\n    PI.fill(101, 89, 89);\r\n    PI.stroke(0);\r\n    drawShapeFromVertices(frontBoot);\r\n    \r\n    // Front Hand\r\n    PI.fill(255, 206, 168);\r\n    PI.ellipse(frontHand.x, frontHand.y, 50, 50);\r\n    \r\n    if (this.subdivsLeft > 0) {\r\n        subdivide(this.hairVertices);\r\n        subdivide(this.bootLeftVertices);\r\n        subdivide(this.bootRightVertices);\r\n        \r\n        subdivide(this.hairVertices_bw);\r\n        subdivide(this.bootLeftVertices_bw);\r\n        subdivide(this.bootRightVertices_bw);\r\n        this.subdivsLeft--;\r\n    }\r\n\t\r\n\tPI.popMatrix();\r\n};\r\n\r\n/***************************************************************************\r\n\t\t\t\t\tTILEMAP CLASS\r\n***************************************************************************/\r\nvar Tilemap = function(currentLevel) {\r\n\tthis.getNextTilemap(currentLevel);\r\n\t//this.TM = tms[0];\r\n\tthis.walls = [];\r\n\tthis.platforms = [];\r\n\tthis.actionables = [];\r\n\tthis.actionables_affected = [];\r\n\t\r\n\tthis.size = TILE_SIZE;\r\n\t\r\n\t// initialize Platforms list\r\n\tfor (var row = 0; row < this.TM.length; row++) {\r\n\t\tfor (var col = 0; col < this.TM[row].length; col++) {\r\n            switch(this.TM[row][col]) {\r\n                case 'p':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new Platform(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 'h':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new HalfGroundBlock(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 's':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new SandBlock(newCoord.x, newCoord.y, this.size, false));\r\n                    break;\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new SandBlock(newCoord.x, newCoord.y, this.size, true));\r\n                    break;\r\n\t\t\t\tcase 'm':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new MidGroundBlock(newCoord.x, newCoord.y, this.size, true));\r\n                    break;\r\n\t\t\t\tcase 'n':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new MidGroundBlock(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 'l':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new LowerGroundBlock(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 'f':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 'b');\r\n\t\t\t\t\tthis.platforms.push(new Flatform(newCoord.x, newCoord.y, 'b'));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 't':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 't');\r\n\t\t\t\t\tthis.platforms.push(new Flatform(newCoord.x, newCoord.y, 't'));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '+':\r\n\t\t\t\t\tthis.ladderTile = {row:row, col:col};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'a':\r\n\t\t\t\t\tthis.actionables.push(new LeverTile({row:row, col:col}));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'i':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 't');\r\n\t\t\t\t\tthis.actionables_affected.push(new InvisibleFlatform(newCoord.x, newCoord.y, 't'));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'j':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 'b');\r\n\t\t\t\t\tthis.actionables_affected.push(new InvisibleFlatform(newCoord.x, newCoord.y, 'b', true));\r\n\t\t\t\t\tbreak;\r\n                default:\r\n                    // Do nothing\r\n            }\r\n        }\r\n\t}\r\n\t\r\n\t// Link actionables to affected actionable objects\r\n\tif (this.actionables.length <= this.actionables_affected.length) {\r\n\t\tfor (var i = 0; i < this.actionables.length; i++) {\r\n\t\t\tthis.actionables[i].addAffectedObject(this.actionables_affected[i]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nTilemap.prototype.reset = function() {\r\n\tthis.walls = [];\r\n\tthis.platforms = [];\r\n\tthis.actionables = [];\r\n\tthis.actionables_affected = [];\r\n\t\r\n\t// initialize Platforms list\r\n\tfor (var row = 0; row < this.TM.length; row++) {\r\n\t\tfor (var col = 0; col < this.TM[row].length; col++) {\r\n            switch(this.TM[row][col]) {\r\n                case 'p':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new Platform(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 'h':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new HalfGroundBlock(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 's':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new SandBlock(newCoord.x, newCoord.y, this.size, false));\r\n                    break;\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new SandBlock(newCoord.x, newCoord.y, this.size, true));\r\n                    break;\r\n\t\t\t\tcase 'm':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new MidGroundBlock(newCoord.x, newCoord.y, this.size, true));\r\n                    break;\r\n\t\t\t\tcase 'n':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new MidGroundBlock(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 'l':\r\n\t\t\t\t\tvar newCoord = {x:col*this.size + this.size/2, y: row*this.size + this.size/2};\r\n                    this.platforms.push(new LowerGroundBlock(newCoord.x, newCoord.y, this.size));\r\n                    break;\r\n\t\t\t\tcase 'f':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 'b');\r\n\t\t\t\t\tthis.platforms.push(new Flatform(newCoord.x, newCoord.y, 'b'));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 't':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 't');\r\n\t\t\t\t\tthis.platforms.push(new Flatform(newCoord.x, newCoord.y, 't'));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '+':\r\n\t\t\t\t\tthis.ladderTile = {row:row, col:col};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'a':\r\n\t\t\t\t\tthis.actionables.push(new LeverTile({row:row, col:col}));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'i':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 't');\r\n\t\t\t\t\tthis.actionables_affected.push(new InvisibleFlatform(newCoord.x, newCoord.y, 't'));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'j':\r\n\t\t\t\t\tvar newCoord = Flatform.getPositionFromTile({row:row, col:col}, 'b');\r\n\t\t\t\t\tthis.actionables_affected.push(new InvisibleFlatform(newCoord.x, newCoord.y, 'b', true));\r\n\t\t\t\t\tbreak;\r\n                default:\r\n                    // Do nothing\r\n            }\r\n        }\r\n\t}\r\n\t\r\n\t// Link actionables to affected actionable objects\r\n\tif (this.actionables.length <= this.actionables_affected.length) {\r\n\t\tfor (var i = 0; i < this.actionables.length; i++) {\r\n\t\t\tthis.actionables[i].addAffectedObject(this.actionables_affected[i]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nvar getAABBvsAABB_Distance = function(a, b) {\r\n\treturn PI.PVector.sub(b.position, a.position);\r\n};\r\n\r\nvar getAABBvsAABB_ContactInfo = function(a, b, delta) {\r\n\tvar a_halfExtents = new PI.PVector(a.getWidth(), a.getHeight());\r\n\tvar b_halfExtents = new PI.PVector(b.getWidth(), b.getHeight());\r\n\t\r\n\tvar combinedPos = new PI.PVector(b.position.x, b.position.y);\r\n\r\n\tvar combinedHalfExtents = PI.PVector.add(a_halfExtents, b_halfExtents);\r\n\t\r\n\tvar normalPlane = (abs(delta.x) > abs(delta.y)) ? new PI.PVector(delta.x, 0) : new PI.PVector(0, delta.y);\r\n\tnormalPlane.normalize();\r\n\tnormalPlane.mult(-1);\r\n\t\t\r\n\tvar centerPlane = new PI.PVector(normalPlane.x * combinedHalfExtents.x, \r\n\t\t\t\t\t\t\t\t\tnormalPlane.y * combinedHalfExtents.y);\r\n\tcenterPlane.add(combinedPos);\r\n\t\r\n\t// Get distance from point(center of a) to the plane\r\n\tvar planeDelta = PI.PVector.sub(a.position, centerPlane);\r\n\tvar distanceToPlane = planeDelta.dot(normalPlane);\r\n\t\r\n\treturn {norm:normalPlane, dist: distanceToPlane, point: a.position, impulse: 0};\r\n};\r\n\r\nTilemap.prototype.getMinRow = function() {\r\n\treturn 0;\r\n};\r\n\r\nTilemap.prototype.getMinCol = function() {\r\n\treturn 0;\r\n};\r\n\r\nTilemap.prototype.getMaxRow = function() {\r\n\treturn this.TM.length-1;\r\n};\r\n\r\nTilemap.prototype.getMaxCol = function() {\r\n\treturn this.TM[0].length-1;\r\n};\r\n\r\nTilemap.prototype.isTileValid = function(tile) {\r\n\treturn (tile.row <= this.getMinRow() && tile.col <= this.getMinCol() && tile.row > this.getMaxRow() && tile.col > this.getMaxCol());\r\n};\r\n\r\nTilemap.prototype.checkInternalCollision = function(tile, normal, object) {\r\n\tvar nextTile = {row:tile.row+normal.x, col:tile.col+normal.y};\r\n\tif (!this.isTileValid(nextTile)) {\r\n\t\treturn false;\r\n\t}\r\n\tvar nextTileType = this.getTileTypeAtTile(nextTile);\r\n\treturn (nextTileType !== ' ' && object.wasOnGround);\r\n};\r\n\r\nTilemap.prototype.checkForCollisions = function(minV, maxV, object) {\t\t\r\n\tvar minTile = Tilemap.getTileFromCoordinate(minV);\r\n\tmaxV.add(0.5, 0.5);\r\n\tvar maxTile = Tilemap.getTileFromCoordinate(maxV);\r\n\t// Possibly add a little wiggle room to maxTile like +0.5\r\n\tobject.atActionable = false;\r\n\r\n\t// TODO could optimize the object searches. Currently just linear searches. Won't scale for huge TM's\r\n\tfor (var r = max(this.getMinRow(), minTile.row); r <= min(this.getMaxRow(), maxTile.row); r++) {\r\n\t\tfor (var c = max(this.getMinCol(), minTile.col); c <= min(this.getMaxCol(), maxTile.col); c++) {\r\n\t\t\tvar currentTile = this.TM[r][c];\r\n\t\t\t\r\n\t\t\tif (currentTile === '+') {\r\n\t\t\t\tobject.atLadder = true;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if (currentTile === 'a') {\r\n\t\t\t\t// Get the actionable object\r\n\t\t\t\tfor (var i = 0; i < this.actionables.length; i++) {\r\n\t\t\t\t\tvar tilePos = Tilemap.getTileFromCoordinate(this.actionables[i].position);\r\n\t\t\t\t\tif (tilePos.row === r && tilePos.col === c) {\r\n\t\t\t\t\t\tobject.atActionable = this.actionables[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t}\r\n            else { // Collision\r\n\t\t\t\tvar currentPlatform = 0;\r\n\t\t\t\tif (currentTile === 'i' || currentTile === 'j') {\r\n\t\t\t\t\tvar affectedObject = 0;\r\n\t\t\t\t\tfor (var i = 0; i < this.actionables_affected.length; i++) {\r\n\t\t\t\t\t\tvar tilePos = Tilemap.getTileFromCoordinate(this.actionables_affected[i].position);\r\n\t\t\t\t\t\tif (tilePos.row === r && tilePos.col === c) {\r\n\t\t\t\t\t\t\tcurrentPlatform = this.actionables_affected[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!currentPlatform.enabled) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (currentTile !== ' ') {\r\n\t\t\t\t\t// Get the platform object to get AABB\r\n\t\t\t\t\tfor (var i = 0; i < this.platforms.length; i++) {\r\n\t\t\t\t\t\tvar tilePos = Tilemap.getTileFromCoordinate(this.platforms[i].position);\r\n\t\t\t\t\t\tif (tilePos.row === r && tilePos.col === c) {\r\n\t\t\t\t\t\t\tcurrentPlatform = this.platforms[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar delta = getAABBvsAABB_Distance(object, currentPlatform);\r\n\t\t\t\t\tvar contact = getAABBvsAABB_ContactInfo(object, currentPlatform, delta);\r\n\t\t\t\t\tvar internalColResult = this.checkInternalCollision({'row':r, 'col':c}, contact.norm, object);\r\n\r\n\t\t\t\t\tvar collisionDetected = object.checkCollision(currentPlatform);\r\n\t\t\t\t\tif (collisionDetected && !internalColResult) {\r\n\t\t\t\t\t\tobject.CollisionResolution(contact.norm, contact.dist);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n\t}\r\n};\r\n\r\nTilemap.prototype.drawLadder = function(tile) {\r\n    var corner = Tilemap.getCoordinateFromTile(tile, 1);\r\n    \r\n\tPI.stroke(1);\r\n\tPI.stroke(10, 10, 10);\r\n    PI.fill(147, 58, 0);\r\n PI.rect(corner.x, corner.y, TILE_SIZE, TILE_SIZE*0.1);\r\n    PI.rect(corner.x, corner.y+TILE_SIZE*0.3, TILE_SIZE, TILE_SIZE*0.2);\r\n    PI.rect(corner.x, corner.y+TILE_SIZE*0.7, TILE_SIZE, TILE_SIZE*0.2);\r\n    \r\n    PI.rect(corner.x, corner.y, TILE_SIZE/5, TILE_SIZE);\r\n    PI.rect(corner.x+TILE_SIZE*0.8, corner.y, TILE_SIZE/5, TILE_SIZE);\r\n};\r\n\r\nTilemap.prototype.drawWall = function(x, y) {\r\n    PI.image(getImage(\"cute/WallBlockTall\"), x, y, this.size, this.size);\r\n};\r\n\r\nTilemap.prototype.draw = function(){\r\n    for (var i = 0; i < this.walls.length; i++) {\r\n        this.drawWall(this.walls[i].x, this.walls[i].y);\r\n    }\r\n\t\r\n\tfor (var i = 0; i < this.platforms.length; i++) {\r\n\t\tthis.platforms[i].draw();\r\n\t}\r\n\r\n\tfor (var i = 0; i < this.actionables.length; i++) {\r\n\t\tthis.actionables[i].draw();\r\n\t}\r\n\t\r\n\tfor (var i = 0; i < this.actionables_affected.length; i++) {\r\n\t\tthis.actionables_affected[i].draw();\r\n\t}\r\n\t\r\n\tif(this.ladderTile) {\r\n\t\tthis.drawLadder(this.ladderTile);\r\n\t}\r\n};\r\n\r\nTilemap.prototype.getTileTypeAtTile = function(tile) {\r\n\tif (tile.row > this.getMaxRow() || tile.col > this.getMaxCol()) {\r\n\t\treturn 0;\r\n\t}\r\n\treturn this.TM[tile.row][tile.col];\r\n};\r\n\r\nTilemap.prototype.tileIsFree = function(tile) {\r\n\t// Check tile is in bounds\r\n\tif (this.isTileValid(tile)) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\treturn this.getTileTypeAtTile(tile) === ' ';\r\n};\r\n\r\nTilemap.prototype.getAdjacentTiles = function(tile) {\r\n\tvar adjacentTiles = [];\r\n\t\r\n\tvar north = {'row':tile.row-1, 'col':tile.col};\r\n\tvar east = {'row':tile.row, 'col':tile.col+1};\r\n\tvar south = {'row':tile.row+1, 'col':tile.col};\r\n\tvar west = {'row':tile.row, 'col':tile.col-1};\r\n\t\r\n\tif (this.tileIsFree(north)) {\r\n\t\tadjacentTiles.push(north);\r\n\t}\r\n\t\r\n\tif (this.tileIsFree(east)) {\r\n\t\tadjacentTiles.push(east);\r\n\t}\r\n\t\r\n\tif (this.tileIsFree(south)) {\r\n\t\tadjacentTiles.push(south);\r\n\t}\r\n\t\r\n\tif (this.tileIsFree(west)) {\r\n\t\tadjacentTiles.push(west);\r\n\t}\r\n\t\r\n\treturn adjacentTiles;\r\n};\r\n\r\nTilemap.prototype.getNextTilemap = function(currentLevel) {\r\n\tconsole.log(this.TM_sequence);\r\n\t/**\r\n\t * Randomize array element order in-place.\r\n\t * Using Durstenfeld shuffle algorithm.\r\n\t */\r\n\tfunction shuffleArray(array) {\r\n\t\tfor (var i = array.length - 1; i > 0; i--) {\r\n\t\t\tvar j = Math.floor(Math.random() * (i + 1));\r\n\t\t\tvar temp = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\t\r\n\tvar tms = [];\r\n\tif(currentLevel === 1) {\r\n\t\tthis.TM_sequence = [\r\n\t\t\t\t[\" +        \",\r\n\t\t\t\t\" p        \",\r\n\t\t\t\t\"     p    \",\r\n\t\t\t\t\"         p\",\r\n\t\t\t\t\"    f   p \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"  f       \",\r\n\t\t\t\t\" h       m\",\r\n\t\t\t\t\"        dl\",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"    t     \",\r\n\t\t\t\t\"         h\",\r\n\t\t\t\t\"mmmmmmmmmn\",\r\n\t\t\t\t\"llllllllll\"],\r\n\t\t\t\t\r\n\t\t\t\t[\"         +\",\r\n\t\t\t\t\" p       t\",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"         p\",\r\n\t\t\t\t\"    f   t \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"         m\",\r\n\t\t\t\t\"h       dl\",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"    t     \",\r\n\t\t\t\t\"         h\",\r\n\t\t\t\t\"mmmmmmmmmn\",\r\n\t\t\t\t\"llllllllll\"],\r\n\t\t\t\t\r\n\t\t\t   [\"llllllllll\",\r\n\t\t\t\t\"lllll+llll\",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"    f   p \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"  f       \",\r\n\t\t\t\t\"h        m\",\r\n\t\t\t\t\"nf      dl\",\r\n\t\t\t\t\"l         \",\r\n\t\t\t\t\"l         \",\r\n\t\t\t\t\"l    t    \",\r\n\t\t\t\t\"lh        \",\r\n\t\t\t\t\"nmmmmmmmmm\",\r\n\t\t\t\t\"llllllllll\"],\r\n\t\t\t\t\r\n\t\t\t\t[\"llllllllll\",\r\n\t\t\t\t\"lllll+llll\",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"  t f   p \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"h        m\",\r\n\t\t\t\t\"nf      dl\",\r\n\t\t\t\t\"l    ns  n\",\r\n\t\t\t\t\"l    n  sn\",\r\n\t\t\t\t\"l    ns  n\",\r\n\t\t\t\t\"l       sn\",\r\n\t\t\t\t\"nmmmmmmmmm\",\r\n\t\t\t\t\"llllllllll\"],\r\n\t\t\t\t\r\n\t\t\t   [\"+ llllllll\",\r\n\t\t\t\t\"m        l\",\r\n\t\t\t\t\"ln        \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"   t    t \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"f         \",\r\n\t\t\t\t\"         m\",\r\n\t\t\t\t\"        dl\",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"m         \",\r\n\t\t\t\t\"ll  f     \",\r\n\t\t\t\t\"ll       h\",\r\n\t\t\t\t\"lmmmmmmmmn\",\r\n\t\t\t\t\"llllllllll\"]\r\n\t\t\t];\r\n\t\tshuffleArray(this.TM_sequence);\r\n\t\tthis.TM = this.TM_sequence.pop();\r\n\t}\r\n\telse if (currentLevel === 6) {\r\n\t\tthis.TM_sequence = [\r\n\t\t\t\t[\"+         \",\r\n\t\t\t\t\"dd        \",\r\n\t\t\t\t\"ss   s    \",\r\n\t\t\t\t\"ss       s\",\r\n\t\t\t\t\"ss  t   s \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"  d       \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"        dl\",\r\n\t\t\t\t\"d         \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"       ddd\",\r\n\t\t\t\t\"      dsss\",\r\n\t\t\t\t\"ddddddssss\",\r\n\t\t\t\t\"ssssssssss\"],\r\n\t\t\t\t\r\n\t\t\t\t[\"+         \",\r\n\t\t\t\t \"dd        \",\r\n\t\t\t\t \"ss        \",\r\n\t\t\t\t \"ss i      \",\r\n\t\t\t\t \"ss        \",\r\n\t\t\t\t \"          \",\r\n\t\t\t\t \"      i   \",\r\n\t\t\t\t \"          \",\r\n\t\t\t\t \"         a\",\r\n\t\t\t\t \"         s\",\r\n\t\t\t\t \"        ds\",\r\n\t\t\t\t \"       dss\",\r\n\t\t\t\t \"a     dsss\",\r\n\t\t\t\t \"ddddddssss\",\r\n\t\t\t\t \"ssssssssss\"],\r\n\t\t\t\t\r\n\t\t\t\t[\"         +\",\r\n\t\t\t\t\"      i   \",\r\n\t\t\t\t\" d        \",\r\n\t\t\t\t\"as        \",\r\n\t\t\t\t\"ss        \",\r\n\t\t\t\t\"  i       \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"    f     \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"         a\",\r\n\t\t\t\t\"        ds\",\r\n\t\t\t\t\"       dss\",\r\n\t\t\t\t\"      dsss\",\r\n\t\t\t\t\"ddddddssss\",\r\n\t\t\t\t\"ssssssssss\"],\r\n\t\t\t\t\r\n\t\t\t\t[\"       ss+\",\r\n\t\t\t\t\"a         \",\r\n\t\t\t\t\"s        t\",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"     i    \",\r\n\t\t\t\t\"  i       \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"    f     \",\r\n\t\t\t\t\"          \",\r\n\t\t\t\t\"j         \",\r\n\t\t\t\t\"ad      da\",\r\n\t\t\t\t\"s      dss\",\r\n\t\t\t\t\"s     dsss\",\r\n\t\t\t\t\"sdddddssss\",\r\n\t\t\t\t\"ssssssssss\"],\r\n\t\t\t\t\r\n\t\t\t\t[\"ssssss+sss\",\r\n\t\t\t\t \"     sjsss\",\r\n\t\t\t\t \"da   s  ss\",\r\n\t\t\t\t \"ss   s    \",\r\n\t\t\t\t \"    d  sss\",\r\n\t\t\t\t \"   ds     \",\r\n\t\t\t\t \"          \",\r\n\t\t\t\t \"          \",\r\n\t\t\t\t \"    i     \",\r\n\t\t\t\t \"          \",\r\n\t\t\t\t \" m       j\",\r\n\t\t\t\t \" l      da\",\r\n\t\t\t\t \"al     dss\",\r\n\t\t\t\t \"sddddddsss\",\r\n\t\t\t\t \"ssssssssss\"]\r\n\t\t\t];\r\n\t\tshuffleArray(this.TM_sequence);\r\n\t\tthis.TM = this.TM_sequence.pop();\r\n\t}\r\n\telse if (currentLevel > 10) {\r\n\t\t// TODO End Of Game\r\n\t}\r\n\telse {\r\n\t\tthis.TM = this.TM_sequence.pop();\r\n\t}\r\n\t\r\n\tthis.reset();\r\n\t/*else if (currentLevel <= 15) {\r\n\t\t// TODO\r\n\t}\r\n\telse if (currentLevel <= 20) {\r\n\t\t// TODO\r\n\t}\r\n\t/*var tmNum = currentTMIndex;\r\n\twhile(tmNum === currentTMIndex) {\r\n\t\ttmNum = floor(random(tms.length));\r\n\t}*/\r\n\r\n\t//return new Tilemap(tms, tmNum);\r\n};\r\n\r\n// Param: Coord - {x: _, y: _}\r\n// Return: tile - {row: _, col: _}\r\nTilemap.getTileFromCoordinate = function(coordinate) {\r\n    return {'row': Math.floor(coordinate.y/TILE_SIZE), 'col': Math.floor(coordinate.x/TILE_SIZE)};\r\n};\r\n\r\n// Param: tile - {row: _, col: _}\r\n// Param: position - 0 = CENTER, 1 = TOP-LEFT-CORNER\r\n// Return: Coord - {x: _, y: _} Note: returns the CENTER-Coord of the tile by default\r\nTilemap.getCoordinateFromTile = function(tile, position) {\r\n\tposition = position || 0;\r\n\tif (position === 0) {\r\n\t\treturn {'x': tile.col*TILE_SIZE + TILE_SIZE/2, 'y': tile.row*TILE_SIZE + TILE_SIZE/2};\r\n\t}\r\n\telse if (position === 1) {\r\n\t\treturn {'x': tile.col*TILE_SIZE, 'y': tile.row*TILE_SIZE};\r\n\t}\r\n};\r\n/* --------------------- END TILEMAP CLASS --------------------- \\*/\r\n\r\n/* --------------------- END GAME CLASSES --------------------- \\*/\r\nvar TM_wallsample = [\"wwwwwwwwwwwwwwwwwwww\",\r\n    \"w          ww      w\",\r\n    \"w wwwwwwww    w  www\",\r\n    \"w wwww     wwww wwww\",\r\n    \"w      wwwwwwww    w\",\r\n    \"w wwww          wwww\",\r\n    \"w      wwwwwwww    w\",\r\n    \"wwwwww wwwww    wwww\",\r\n    \"w  ww    wwwwww   ww\",\r\n    \"w  wwwww   ww   wwww\",\r\n    \"w      www  ww w   w\",\r\n    \"w  wwwwwww       www\",\r\n    \"w  www     wwww wwww\",\r\n    \"w      wwwwwwww    w\",\r\n    \"w wwww          wwww\",\r\n    \"w      wwwwwwww    w\",\r\n    \"wwwwww wwwww    wwww\",\r\n    \"w  ww    w   ww   ww\",\r\n    \"w     ww    ww  wwww\",\r\n    \"wwwwwwwwwwwwwwwwwwww\"];\r\n\t\t\t\r\nvar TM = 0;\r\n\r\nvar GameState = {\r\n    START_MENU : 0,\r\n    PLAYING : 1,\r\n    HELP_MENU : 2,\r\n    OPTIONS_MENU : 3,\r\n    CONTROLS_MENU : 4,\r\n\tPAUSED : 5,\r\n\tEND : 6,\r\n};\r\n\r\nvar StartMenuState = function() {\r\n    this.a=PI.random(1500);\r\n    this.mountains = 0; \r\n    this.sun = new Sun();\r\n    this.bigJan = new Player(200, 350);\r\n    \r\n\tthis.playButton = new Button(200, 200, \"Play\");\r\n\tthis.helpButton = new Button(200, 250, \"Help\");\r\n\tthis.optionsButton = new Button(200, 300, \"Options\");\r\n};\r\n\r\nvar PlayingState = function() {\r\n\tvar startTile = Tilemap.getCoordinateFromTile({row:12, col:2}, 0);\r\n\tthis.currentLevel = 1;\r\n\tTM = new Tilemap(this.currentLevel);\r\n\tthis.Jan = new Player(startTile.x, startTile.y, TM);\r\n};\r\nvar HelpMenuState = function() {\r\n\tthis.nextButton = new ArrowButton(350, 350, \"Next\");\r\n};\r\nvar OptionsMenuState = function() {\r\n\tthis.testJan = new Player(200, 450);\r\n\tthis.testJan.size = 100;\r\n\t\r\n    this.menuButton = new Button(200, 350, \"Menu\");\r\n    \r\n\tthis.playerColorSelector = new ColorSelector(50+(0.35*300), 180+(0.3*100));\r\n\tthis.playerColorSelector.add('y');\r\n    this.playerColorSelector.add('r');\r\n    this.playerColorSelector.add('b');\r\n    this.playerColorSelector.add('g');\r\n};\r\nvar ControlsMenuState = function() {\r\n\tthis.backButton = new ArrowButton(50, 350, \"Back\", -1);\r\n\tthis.menuButton = new Button(200, 350, \"Menu\");\r\n};\r\nvar PausedState = function() {\r\n\t\r\n\tthis.tips = [\"After jumping, Jan can jump once more in the air. Use her two jumps wisely.\",\r\n\t\t\t\t\t\"Maximize Jan's jumping distance by timing your second jump just right. Experiment to find the best timing.\", \r\n\t\t\t\t\t\"Don't stray too far left or right. Strange forces seem to pull Jan upward...\",\r\n\t\t\t\t\t\"Don't forget that [SPACE] is your action key!\", \r\n\t\t\t\t\t\"Sometimes platforms will even help push Jan up.\"];\r\n\t\r\n    this.continueButton = new Button(200, 200, \"Continue\");\r\n    this.helpButton = new Button(200, 250, \"Help\");\r\n    this.exitButton = new Button(200, 300, \"Exit\");\r\n};\r\nvar EndState = function() {\r\n\tthis.a=PI.random(1500);\r\n    this.mountains = 0; \r\n    this.sun = new Sun();\r\n\t\r\n\tthis.menuButton = new Button(200, 370, \"Menu\");\r\n};\r\n\r\nvar GameStates = [new StartMenuState(), new PlayingState(), new HelpMenuState(), new OptionsMenuState(), new ControlsMenuState(), new PausedState(), new EndState()];\r\n\r\nvar CurrentGameState = GameState.START_MENU; \r\n//var CurrentGameState = GameState.PLAYING;\r\n/* --------------------- Menu Views --------------------- \\*/\r\n\r\nStartMenuState.prototype.setMountains = function() {\r\n    this.mountains = [[],[],[],[],[],[]]; \r\n    for (var i=0; i<=5; i++) {\r\n        for (var j=0; j<=40; j++) {\r\n            var n = PI.noise(this.a);\r\n            this.mountains[i][j] = PI.map(n,0,1,0,400-i*50);\r\n            this.a += 0.025;  // ruggedness\r\n        }\r\n    }  \r\n};\r\n\r\nvar groundBlocks = [];\r\nfor (var i = 0; i < 400; i+=40) {\r\n\tgroundBlocks.push(new MidGroundBlock(i, 420, true));\r\n}\r\n\r\nStartMenuState.prototype.drawBackground = function() {\r\n    PI.noStroke();\r\n    if (this.mountains === 0) {\r\n        this.setMountains();\r\n    }\r\n    // sky\r\n    var n1 = this.a;  \r\n    for (var x=0; x<=400; x+=8) {\r\n        var n2 = 0;\r\n        for (var y=0; y<=250; y+=8) {\r\n            var c = PI.map(PI.noise(n1,n2),0,1,0,255);\r\n            PI.fill(c, c, c+70,150);\r\n            PI.rect(x,y,8,8);\r\n            n2 += 0.05; // step size in noise\r\n        }\r\n        n1 += 0.02; // step size in noise\r\n    }\r\n    this.a -= 0.01;  // speed of clouds\r\n    \r\n    // mountains\r\n    for (x=0; x<=5; x++) {\r\n        for (var y=0; y<=40; y++) {\r\n            PI.fill(10 + x*5, 40+x*10, 0);\r\n            // draw quads of width 10 pixels\r\n            PI.quad(y*10,this.mountains[x][y]+x*55,(y+1)*10,this.mountains[x][y+1]+(x)*55,(y+1)*10,400,y*10,400);\r\n        }\r\n    }\r\n    \r\n    this.sun.draw();\r\n\t\r\n\tfor (var i = 0; i < groundBlocks.length; i++) {\r\n\t\tgroundBlocks[i].draw();\r\n\t}\r\n};\r\n\r\nStartMenuState.prototype.display = function() {\r\n    PI.background(255, 255, 255);\r\n\tthis.bigJan.changeColor(SETTINGS_PLAYER_COLOR);\r\n    \r\n    this.drawBackground();\r\n    this.bigJan.size = 150;\r\n    this.bigJan.walk();\r\n    this.bigJan.draw();\r\n    \r\n\t// State Constants\r\n    var CONTENT_X1 = 50;\r\n    var CONTENT_X2 = 350;\r\n    var CONTENT_W = CONTENT_X2 - CONTENT_X1;\r\n    \r\n    var CONTENT_Y1 = 160;\r\n    var CONTENT_Y2 = 340;\r\n    var CONTENT_H = CONTENT_Y2 - CONTENT_Y1;\r\n    \r\n    // Content Box\r\n    PI.fill(199, 197, 197, 50);\r\n    PI.noStroke();\r\n    PI.rect(CONTENT_X1, CONTENT_Y1, CONTENT_W, CONTENT_H);\r\n    PI.fill(0);\r\n\t\r\n    PI.fill(0);\r\n    PI.stroke(0);\r\n    \r\n    PI.textSize(50);\r\n    PI.text(\"Jumping Jan\", 200, 80);\r\n    \r\n    PI.textSize(20);\r\n    PI.text(\"Collin C. Choy\", 75, 380);\r\n    \r\n    this.playButton.draw();\r\n    this.helpButton.draw();\r\n    this.optionsButton.draw();\r\n};\r\n\r\nStartMenuState.prototype.MouseCallback = function() {\r\n    if (this.playButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.PLAYING;   \r\n    }\r\n    else if (this.helpButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.HELP_MENU;\r\n    }\r\n    else if (this.optionsButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.OPTIONS_MENU;   \r\n    }\r\n};\r\n\r\nHelpMenuState.prototype.display = function() {\r\n    PI.background(255, 0, 0, 10);\r\n    PI.fill(0);\r\n    PI.textSize(30);\r\n    PI.text(\"Instructions\", 200, 140);\r\n    \r\n    // State Constants\r\n    var CONTENT_X1 = 50;\r\n    var CONTENT_X2 = 350;\r\n    var CONTENT_W = CONTENT_X2 - CONTENT_X1;\r\n    \r\n    var CONTENT_Y1 = 180;\r\n    var CONTENT_Y2 = 280;\r\n    var CONTENT_H = CONTENT_Y2 - CONTENT_Y1;\r\n    \r\n    // Content Box\r\n    PI.stroke(0);\r\n    PI.fill(199, 197, 197, 50);\r\n    PI.rect(CONTENT_X1, CONTENT_Y1, CONTENT_W, CONTENT_H);\r\n    PI.fill(0);\r\n    var instructions = \"Jan awakens to find herself in a strange new land. Help her get home by exploring this new world. Be weary of anyone or anything that you find as they may not be friendly!\";\r\n    PI.textSize(14);\r\n    PI.text(instructions, 55, 180, 280, 95);\r\n    \r\n    this.nextButton.draw();\r\n};\r\n\r\nHelpMenuState.prototype.MouseCallback = function() {\r\n    if (this.nextButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.CONTROLS_MENU;\r\n    }\r\n};\r\n\r\nControlsMenuState.prototype.drawKey = function(x, y, label, width) {\r\n    var KEY_SIZE_W = width || 20;\r\n    var KEY_SIZE_H = 20;\r\n    PI.fill(245, 245, 245);\r\n    PI.rect(x-KEY_SIZE_W/2, y-KEY_SIZE_H/2, KEY_SIZE_W, KEY_SIZE_H);\r\n    \r\n    PI.fill(0);\r\n    PI.text(label, x, y);\r\n};\r\n\r\nControlsMenuState.prototype.display = function() {\r\n    PI.background(20, 200, 0, 10);\r\n    PI.fill(0);\r\n    PI.textSize(30);\r\n    PI.text(\"Controls\", 200, 140);\r\n    \r\n    // State Constants\r\n    var CONTENT_X1 = 50;\r\n    var CONTENT_X2 = 350;\r\n    var CONTENT_W = CONTENT_X2 - CONTENT_X1;\r\n    \r\n    var CONTENT_Y1 = 180;\r\n    var CONTENT_Y2 = 280;\r\n    var CONTENT_H = CONTENT_Y2 - CONTENT_Y1;\r\n    \r\n    // Content Box\r\n    PI.stroke(0);\r\n    PI.fill(199, 197, 197, 50);\r\n    PI.rect(CONTENT_X1, CONTENT_Y1, CONTENT_W, CONTENT_H);\r\n    PI.fill(0);\r\n    PI.textSize(14);\r\n\r\n    // AWSD Movement\r\n    this.drawKey(CONTENT_X1+(0.25*CONTENT_W), CONTENT_Y1+(0.3*CONTENT_H), 'W');\r\n    this.drawKey(CONTENT_X1+(0.25*CONTENT_W), CONTENT_Y1+(0.3*CONTENT_H)+25, 'S');\r\n    this.drawKey(CONTENT_X1+(0.25*CONTENT_W)-25, CONTENT_Y1+(0.3*CONTENT_H)+25, 'A');\r\n    this.drawKey(CONTENT_X1+(0.25*CONTENT_W)+25, CONTENT_Y1+(0.3*CONTENT_H)+25, 'D');\r\n    PI.text(\"Move Jan\", CONTENT_X1+(0.25*CONTENT_W), CONTENT_Y1+(0.8*CONTENT_H));\r\n    \r\n    this.drawKey(CONTENT_X1+(0.75*CONTENT_W), CONTENT_Y1+(0.3*CONTENT_H), 'P');\r\n    this.drawKey(CONTENT_X1+(0.75*CONTENT_W)-15, CONTENT_Y1+(0.7*CONTENT_H), \"Space\", 50);\r\n    PI.textAlign(PI.LEFT, PI.CENTER);\r\n    PI.text(\"Pause\", CONTENT_X1+(0.75*CONTENT_W)+15, CONTENT_Y1+(0.3*CONTENT_H));\r\n    PI.text(\"Action\", CONTENT_X1+(0.75*CONTENT_W)+15, CONTENT_Y1+(0.7*CONTENT_H));\r\n    \r\n    PI.textAlign(PI.CENTER, PI.CENTER);\r\n    this.backButton.draw();\r\n    this.menuButton.draw();\r\n};\r\n\r\nControlsMenuState.prototype.MouseCallback = function() {\r\n    if (this.backButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.HELP_MENU;\r\n    }\r\n    else if (this.menuButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.START_MENU;   \r\n    }\r\n};\r\n\r\nOptionsMenuState.prototype.display = function() {\r\n    PI.background(0, 100, 200, 10);\r\n    PI.fill(0);\r\n    PI.textSize(30);\r\n    PI.text(\"Options\", 200, 140);\r\n    \r\n\tthis.testJan.changeColor(SETTINGS_PLAYER_COLOR);\r\n\tthis.testJan.draw();\r\n\t\r\n    // State Constants\r\n    var CONTENT_X1 = 50;\r\n    var CONTENT_X2 = 350;\r\n    var CONTENT_W = CONTENT_X2 - CONTENT_X1;\r\n    \r\n    var CONTENT_Y1 = 180;\r\n    var CONTENT_Y2 = 280;\r\n    var CONTENT_H = CONTENT_Y2 - CONTENT_Y1;\r\n    \r\n    // Content Box\r\n    PI.stroke(0);\r\n    PI.strokeWeight(1);\r\n    PI.fill(199, 197, 197, 50);\r\n    PI.rect(CONTENT_X1, CONTENT_Y1, CONTENT_W, CONTENT_H);\r\n    PI.fill(0);\r\n    PI.textSize(14);\r\n    \r\n    PI.text(\"Player Color: \", CONTENT_X1+(0.2*CONTENT_W), CONTENT_Y1+(0.3*CONTENT_H));\r\n\r\n    this.playerColorSelector.setSelectedIndex(SETTINGS_PLAYER_COLOR);\r\n    \r\n    this.playerColorSelector.draw();\r\n    \r\n    this.menuButton.draw();\r\n};\r\n\r\nOptionsMenuState.prototype.MouseCallback = function() {\r\n    if (this.menuButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.START_MENU;   \r\n    }\r\n    else if (this.playerColorSelector.mouseIsOnMe()) {\r\n        for (var i = 0; i < this.playerColorSelector.items.length; i++) {\r\n            if (this.playerColorSelector.items[i].mouseIsOnMe()) {\r\n                this.playerColorSelector.setSelectedIndex(i);\r\n                SETTINGS_PLAYER_COLOR = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nPausedState.prototype.generateNewTip = function() {\r\n\tthis.tip = this.tips[floor(PI.random(this.tips.length))];\r\n};\r\n\r\nPausedState.prototype.showTip = function(y) {\r\n\tPI.fill(0);\r\n\tPI.textSize(18);\r\n\t\r\n\tPI.text(\"Tips & Tricks: \" + this.tip, 50, y-100, 300, 100);\r\n}\r\n\r\nPausedState.prototype.display = function() {\r\n\tPI.background(0);\r\n\tTM.draw();\r\n\tPI.noStroke();\r\n\tPI.fill(224, 224, 224, 150);\r\n PI.rect(0, 0, 400, 600);\r\n\t\r\n\t// State Constants\r\n    var CONTENT_X1 = 50;\r\n    var CONTENT_X2 = 350;\r\n    var CONTENT_W = CONTENT_X2 - CONTENT_X1;\r\n    \r\n    var CONTENT_Y1 = 100;\r\n    var CONTENT_Y2 = 340;\r\n    var CONTENT_H = CONTENT_Y2 - CONTENT_Y1;\r\n    \r\n    // Content Box\r\n    PI.stroke(0);\r\n    PI.fill(245, 245, 245, 250);\r\n    PI.rect(CONTENT_X1, CONTENT_Y1, CONTENT_W, CONTENT_H);\r\n    PI.fill(0);\r\n\t\r\n\tPI.fill(0);\r\n\tPI.textSize(30);\r\n    PI.text(\"Paused\", 200, 140);\r\n    \r\n    PI.stroke(0);\r\n    this.continueButton.draw();\r\n    this.helpButton.draw();\r\n    this.exitButton.draw();\r\n\t\r\n\tthis.showTip(500);\r\n};\r\n\r\nPausedState.prototype.MouseCallback = function() {\r\n    if (this.continueButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.PLAYING;\r\n    }\r\n    else if (this.helpButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.HELP_MENU; //TODO add way back to play game\r\n    }\r\n    else if (this.exitButton.mouseIsOnMe()) {\r\n        // TODO: Reset all Game variables\r\n\t\tGameStates[GameState.PLAYING].resetGame();\r\n        CurrentGameState = GameState.START_MENU;\r\n    }  \r\n};\r\n\r\nPlayingState.prototype.getBgTile = function(x, y, w, h) {\r\n\tvar size = w;\r\n    var corner = {x:x-w/2, y:y-h/2};\r\n\tvar c1 = 0, c2 = 0, c3 = 0;\r\n\tif (this.currentLevel <= 5) {\r\n\t\tc1 = PI.color(28, 40, 107);\r\n\t\tc2 = PI.color(66, 98, 184);\r\n\t\tc3 = PI.color(153, 162, 184, 100);\r\n\t}\r\n\telse if (this.currentLevel <= 10 ) {\r\n\t\tc1 = PI.color(242, 160, 8);\r\n\t\tc2 = PI.color(224, 118, 38);\r\n\t\tc3 = PI.color(227, 161, 113, 100);\r\n\t}\r\n\telse if (this.currentLevel <= 15 ) {\r\n\t\t\r\n\t}\r\n\telse if (this.currentLevel <= 20) {\r\n\t\t\r\n\t}\r\n    \r\n    PI.fill(c1);\r\n    PI.rect(corner.x, corner.y, w, h);\r\n    \r\n    var drawBall = function(m_x, m_y, m_size) {\r\n        PI.fill(c2);\r\n        PI.ellipse(m_x, m_y, m_size, m_size);\r\n        PI.noStroke();\r\n        PI.fill(c3);\r\n        PI.ellipse(m_x-m_size*0.05, m_y-m_size*0.03, m_size*0.6, m_size*0.6);\r\n    };\r\n\t\r\n\tdrawBall(x+size*0.2, y+size*0.1, size*0.48);\r\n\tdrawBall(x-size*0.19, y-size*0.15, size*0.4);\r\n\tdrawBall(x-size*0.19, y+size*0.25, size*0.2);\r\n};\r\n\r\nPlayingState.prototype.drawBgTile = function(x, y, w, h) {\r\n\tvar corner = {x:x, y:y};\r\n\tvar center = {x:x+w/2, y:y+h/2};\r\n    \r\n    this.getBgTile(center.x, center.y, w, h);\r\n    \r\n    PI.fill(0, 0, 0, 30);\r\n    PI.rect(corner.x, corner.y, w, h);\r\n};\r\n\r\nPlayingState.prototype.processNextLevel = function() {\r\n\tthis.currentLevel += 1;\r\n\tTM.getNextTilemap(this.currentLevel);\r\n\tvar startTile = Tilemap.getCoordinateFromTile({row:12, col:2}, 0);\r\n\tthis.Jan = new Player(startTile.x, startTile.y, TM);\r\n};\r\n\r\nPlayingState.prototype.resetGame = function() {\r\n\tthis.currentLevel = 1;\r\n\tTM.getNextTilemap(this.currentLevel);\r\n\tvar startTile = Tilemap.getCoordinateFromTile({row:12, col:2}, 0);\r\n\tthis.Jan = new Player(startTile.x, startTile.y, TM);\r\n};\r\n\r\nPlayingState.prototype.showCurrentLevel = function() {\r\n\tPI.fill(240, 240, 240);\r\n\tPI.text(\"Level: \" + ((this.currentLevel === 11) ? \"END\" : this.currentLevel), 370, 580);\r\n};\r\n\r\nPlayingState.prototype.processWin = function() {\r\n\tthis.resetGame();\r\n\tCurrentGameState = GameState.END;\r\n};\r\n\r\nPlayingState.prototype.MouseCallback = function() {};\r\n\r\nPlayingState.prototype.display = function() {\r\n\tPI.background(0);\r\n\tthis.drawBgTile(0, 0, 400, 600);\r\n\t\r\n    TM.draw();\r\n\t\r\n\tthis.Jan.changeColor(SETTINGS_PLAYER_COLOR);\r\n\t\r\n\tthis.Jan.update();\r\n\tthis.Jan.draw();\r\n\t\r\n\t/*var temp = this.Jan.getBoundingBoxEdges();\r\n\tPI.noFill();\r\n PI.rect(temp.left, (temp.top), temp.right-temp.left, temp.bottom-temp.top);*/\r\n\t\r\n\tthis.showCurrentLevel();\r\n\r\n\tif (KEYS[80] === 1) {\r\n\t\tGameStates[GameState.PAUSED].generateNewTip();\r\n\t\tCurrentGameState = GameState.PAUSED;\r\n\t\tKEYS[80] = 0;\r\n\t}\r\n\t\r\n\tif (this.Jan.atLadder && this.currentLevel <= 10) {\r\n\t\tthis.processNextLevel();\r\n\t}\r\n\telse if (this.currentLevel > 10) {\r\n\t\tthis.processWin();\r\n\t}\r\n};\r\n\r\nEndState.prototype.MouseCallback = function() {\r\n\tif (this.menuButton.mouseIsOnMe()) {\r\n        CurrentGameState = GameState.START_MENU;\r\n\t\tKEYS = [];\r\n    }\r\n};\r\n\r\nEndState.prototype.setMountains = function() {\r\n    this.mountains = [[],[],[],[],[],[]]; \r\n    for (var i=0; i<=5; i++) {\r\n        for (var j=0; j<=40; j++) {\r\n            var n = PI.noise(this.a);\r\n            this.mountains[i][j] = PI.map(n,0,1,0,400-i*50);\r\n            this.a += 0.025;  // ruggedness\r\n        }\r\n    }  \r\n};\r\n\r\nEndState.prototype.drawBackground = function() {\r\n    PI.noStroke();\r\n    if (this.mountains === 0) {\r\n        this.setMountains();\r\n    }\r\n    // sky\r\n    var n1 = this.a;  \r\n    for (var x=0; x<=400; x+=8) {\r\n        var n2 = 0;\r\n        for (var y=0; y<=250; y+=8) {\r\n            var c = PI.map(noise(n1,n2),0,1,0,255);\r\n            PI.fill(c, c, c+70,150);\r\n            PI.rect(x,y,8,8);\r\n            n2 += 0.05; // step size in noise\r\n        }\r\n        n1 += 0.02; // step size in noise\r\n    }\r\n    this.a -= 0.01;  // speed of clouds\r\n    \r\n    // mountains\r\n    for (x=0; x<=5; x++) {\r\n        for (var y=0; y<=40; y++) {\r\n            PI.fill(10 + x*5, 40+x*10, 0);\r\n            // draw quads of width 10 pixels\r\n            PI.quad(y*10,this.mountains[x][y]+x*55,(y+1)*10,this.mountains[x][y+1]+(x)*55,(y+1)*10,400,y*10,400);\r\n        }\r\n    }\r\n    \r\n    this.sun.draw();\r\n\t\r\n\tfor (var i = 0; i < groundBlocks.length; i++) {\r\n\t\tgroundBlocks[i].draw();\r\n\t}\r\n};\r\n\r\nEndState.prototype.display = function() {\r\n\tthis.drawBackground();\r\n    PI.fill(20, 20, 20);\r\n    PI.textSize(30);\r\n    PI.text(\"YOU WIN!\", 200, 100);\r\n    \r\n    // State Constants\r\n    var CONTENT_X1 = 50;\r\n    var CONTENT_X2 = 350;\r\n    var CONTENT_W = CONTENT_X2 - CONTENT_X1;\r\n    \r\n    var CONTENT_Y1 = 160;\r\n    var CONTENT_Y2 = 330;\r\n    var CONTENT_H = CONTENT_Y2 - CONTENT_Y1;\r\n    \r\n    // Content Box\r\n    PI.stroke(0);\r\n    PI.fill(199, 197, 197, 150);\r\n    PI.rect(CONTENT_X1, CONTENT_Y1, CONTENT_W, CONTENT_H);\r\n    PI.fill(0);\r\n    var instructions = \"Jan successfully made it back! After many grueling hours of jumping from platform to platform, she finally made it back up to the surface. It turns out that she must have fallen below to the world beneath the surface. Luckily, her amazing jumping skills enabled her to find her way back up. Let's just hope she doesn't stumble again...\\n To Be Continued.\";\r\n    PI.textSize(14);\r\n    PI.text(instructions, 55, 160, 280, 165);\r\n    \r\n    this.menuButton.draw();\r\n};\r\n\r\n/* --------------------- END Menu Views --------------------- \\*/\r\n\r\n/* --------------------- User Control --------------------- \\*/\r\nPI.mouseClicked = function() {\r\n    GameStates[CurrentGameState].MouseCallback();\r\n};\r\n\r\nPI.keyPressed = function() {\r\n\tif (CurrentGameState === GameState.PLAYING || CurrentGameState === GameState.PAUSED) {\r\n\t\tif (KEYS[keyCode] !== 1) {\r\n\t\t\tKEYS[keyCode] = 1;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nPI.keyReleased = function() {\r\n\tif (CurrentGameState === GameState.PLAYING || CurrentGameState === GameState.PAUSED) {\r\n\t\tif (keyCode === 87) {\r\n\t\t\tKEYS[87] = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tKEYS[keyCode] = 0;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n\r\n/* --------------------- END User Control --------------------- \\*/\r\nPI.draw = function() {\r\n    PI.cursor(PI.ARROW);\r\n\r\n\tGameStates[CurrentGameState].display();\r\n};\r\n\r\n/* --------------------- END PROGRAM CODE --------------------- \\*/\r\n\r\n}; \n\n//# sourceURL=webpack:///./src/jumpingjan.js?");

/***/ })

/******/ });